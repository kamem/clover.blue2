<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>clover.blue</title>
    <updated>2019-09-11T16:58:19.236Z</updated>
    <generator>https://github.com/nuxt-community/feed-module</generator>
    <link rel="alternate" href="https://clover.blue/feed.xml"/>
    <subtitle>とあるフロントエンドの技術日記</subtitle>
    <category term="blog">
    </category>
    <contributor>
        <uri>https://clover.blue/</uri>
    </contributor>
    <entry>
        <title type="html"><![CDATA[DropboxのWebhookのurlをGoogle Cloud Functionsで作ったapiを使ってやってみる]]></title>
        <id>9a566dedd3b22129bffc</id>
        <link href="https://clover.blue/items/9a566dedd3b22129bffc">
        </link>
        <updated>2018-11-19T16:15:30.000Z</updated>
        <content type="html"><![CDATA[
<h2>
<span id="google-cloud-functions" class="fragment"></span><a href="#google-cloud-functions"><i class="fa fa-link"></i></a>Google Cloud Functions</h2>

<p>簡単に言うとGCP上で Javascriptで書いた関数を実行するサービスです。Nodeを使った書くことができます。</p>

<p>詳しくは下記のサイトなどをみてください。<br>
<a href="https://www.topgate.co.jp/gcp14-using-serverless-architecture-by-cloud-functions#cloud-functions" rel="nofollow noopener" target="_blank">【GCP入門編・第14回】 Cloud Functions を使ってサーバレスアーキテクチャを体験しよう！</a></p>

<h2>
<span id="準備" class="fragment"></span><a href="#%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>準備</h2>

<h3>
<span id="serverless-frameworkを使う" class="fragment"></span><a href="#serverless-framework%E3%82%92%E4%BD%BF%E3%81%86"><i class="fa fa-link"></i></a>Serverless Frameworkを使う</h3>

<p>Serverless Frameworkを使うと簡単な感じでcloud functionsを使うことができるみたいで便利！</p>

<ul>
<li><a href="https://qiita.com/suzukenz/items/a9811461056956ee1a3b" id="reference-d414764e8c04a1da7a3a">Google Cloud Functions を Serverless Framework で使う</a></li>
<li><a href="https://qiita.com/keitakn/items/879bb8c075db802906df" id="reference-974957e7ff409b6e66f2">Serverless Frameworkのインストールと初期設定</a></li>
</ul>

<h4>
<span id="google-cloud-platform-のサービスアカウントキーを作成しておこう" class="fragment"></span><a href="#google-cloud-platform-%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%AD%E3%83%BC%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6%E3%81%8A%E3%81%93%E3%81%86"><i class="fa fa-link"></i></a>Google Cloud Platform のサービスアカウントキーを作成しておこう</h4>

<p>下記サイトをみて手順通りに勧めていけばアカウントキーを作成できると思います。</p>

<ul>
<li><a href="https://www.magellanic-clouds.com/blocks/guide/create-gcp-service-account-key/" rel="nofollow noopener" target="_blank">Google Cloud Platform のサービスアカウントキーを作成する</a></li>
</ul>

<h4>
<span id="serverless-framework注意点" class="fragment"></span><a href="#serverless-framework%E6%B3%A8%E6%84%8F%E7%82%B9"><i class="fa fa-link"></i></a>Serverless Framework注意点</h4>

<ul>
<li><a href="https://serverless.com/framework/docs/providers/google/guide/credentials/" rel="nofollow noopener" target="_blank">Google - 認証情報 </a></li>
</ul>

<p><code>serverless.yml</code>を用意する際に、特にこの部分を忘れないでください！</p>

<blockquote>
<p>Save the keyfile somewhere secure. We recommend making a folder in your root folder and putting it there. Like this, ~/.gcloud/keyfile.json. You can change the file name from keyfile to anything. Remember the path you saved it to.</p>
</blockquote>

<p>保存したkeyfileを自分のローカルの任意の場所（ルートディレクトリなど）に置くことを推奨しています。<br>
<code>~/.gcloud/keyfile.json</code>のように配置して、serverless.yml<code>内の</code>credentials: ~/.gcloud/keyfile.json`と記載しましょう。</p>

<h5>
<span id="google-cloud-deployment-manager-v2-apiは有効にしておきましょう" class="fragment"></span><a href="#google-cloud-deployment-manager-v2-api%E3%81%AF%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%97%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%BE%E3%81%97%E3%82%87%E3%81%86"><i class="fa fa-link"></i></a>Google Cloud Deployment Manager V2 APIは有効にしておきましょう。</h5>

<p><code>serverless deploy</code>で怒られたらエラーに書いてあるアドレスにとんでapiを有効にしましょう。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>Error: Access Not Configured. Google Cloud Deployment Manager API has not been used in project ******* before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/deploymentmanager.googleapis.com/overview?project=******* then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.
</pre></div></div>

<h2>
<span id="dropboxのwebhookについて" class="fragment"></span><a href="#dropbox%E3%81%AEwebhook%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>DropboxのWebhookについて</h2>

<p>公式の説明: ttps://<a href="http://www.dropbox.com/developers/reference/webhooks" rel="nofollow noopener" target="_blank">www.dropbox.com/developers/reference/webhooks</a><br>
個々のアプリを指定してwebhookを設定しよう <a href="https://www.dropbox.com/developers/apps" class="autolink" rel="nofollow noopener" target="_blank">https://www.dropbox.com/developers/apps</a></p>

<h2>
<span id="challengeをsendでそのまま返す" class="fragment"></span><a href="#challenge%E3%82%92send%E3%81%A7%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E8%BF%94%E3%81%99"><i class="fa fa-link"></i></a>challengeをsendでそのまま返す</h2>

<p>返してあげないと認証うまく行ってってことでエラーになるためchallengeをそのままsendでお繰り返してあげるとうまくいきます。</p>

<h3>
<span id="例" class="fragment"></span><a href="#%E4%BE%8B"><i class="fa fa-link"></i></a>例</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>export function test(req, res) {
  res.status(200).send(req.query.challenge);
}
</pre></div></div>

<h3>
<span id="reqbodyには下記のようにデータが入っています" class="fragment"></span><a href="#reqbody%E3%81%AB%E3%81%AF%E4%B8%8B%E8%A8%98%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%81%8C%E5%85%A5%E3%81%A3%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99"><i class="fa fa-link"></i></a><code>req.body</code>には下記のようにデータが入っています</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>{
    "list_folder"：{
        "accounts"：[
            "dbid：AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"、
            ...
        ]
    }、
    "delta"：{
        "ユーザー"：[
            12345678、
            23456789、
            ...
        ]
    }
}
</pre></div></div>

<h3>
<span id="参考" class="fragment"></span><a href="#%E5%8F%82%E8%80%83"><i class="fa fa-link"></i></a>参考</h3>

<ul>
<li><a href="https://tanaka0325.github.io/post/using_dropbox_webhook_api/" rel="nofollow noopener" target="_blank">Dropbox Webhook API を使う</a></li>
<li><a href="https://qiita.com/TakamiChie/items/6b21652afa7018ae6b27#%E4%BB%A5%E9%99%8D%E3%81%AEwebhook%E3%82%92%E5%8F%97%E3%81%91%E3%82%8B" id="reference-b04924f9e929c8416f63">Dropbox APIを使ってDropboxのフォルダを操作する（調査中）</a></li>
</ul>

<p>少し調べたのをまとめました。<br>
他にも色々調べたり実際にものができたら共有予定です。</p>

<p>実際にDropbox PaperのWebhookを使いたかったのですが。<br>
Paperには対応していないのですかね。。</p>
]]></content>
        <published>2018-11-19T16:15:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[スクロールによってCSSを変更し、パララックス効果を実現するjQueryプラグイン]]></title>
        <id>1c49f329356e80bf3ba2</id>
        <link href="https://clover.blue/items/1c49f329356e80bf3ba2">
        </link>
        <updated>2018-02-03T11:48:28.000Z</updated>
        <content type="html"><![CDATA[<p>スクロールによってさまざまなCSSを変更することができます。<br>
またプラグインのオプションをdata属性に設定できるjs（<a href="https://github.com/kamem/jquery.dataExtend" rel="nofollow noopener" target="_blank">jquery.dataExtend</a>）を使うとdata属性に指定するだけで効果を与えることができます。</p>

<p>以前も同じようなプラグインを作ってはいたのですが、複雑になりがちだったため<br>
なるべくシンプルに、再現したいと思ったことが工夫次第でできる作りにしたいと思い作り直しました。</p>

<p>GitHub: <a href="https://github.com/kamem/jquery.scrollParallax" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.scrollParallax</a></p>

<h2>
<span id="description" class="fragment"></span><a href="#description"><i class="fa fa-link"></i></a>Description</h2>

<p>このプラグインには3つの機能があります。</p>

<ol>
<li>任意の位置を通過したときに関数を実行する</li>
<li>スクロール量に応じてcssを変化させる</li>
<li>移動距離に応じてcssを変化させる</li>
</ol>

<h2>
<span id="demo" class="fragment"></span><a href="#demo"><i class="fa fa-link"></i></a>DEMO</h2>

<ul>
<li><a href="http://github.develo.org/jquery.scrollParallax/example/y.html" rel="nofollow noopener" target="_blank">y scroll</a></li>
</ul>

<h2>
<span id="requirement" class="fragment"></span><a href="#requirement"><i class="fa fa-link"></i></a>Requirement</h2>

<ul>
<li>jquery</li>
<li><a href="https://github.com/kamem/jquery.dataExtend" rel="nofollow noopener" target="_blank">jquery.dataExtend</a></li>
</ul>

<p>※ jquery.dataExtendはjqueryプラグイン用の記述をdata属性に持たせることができるプラグインです。<br>
これを使うことによってjsをあまり書かずにparallax効果を実現することができます。</p>

<p>jquery.dataExtendの詳しい説明は下記を見てください。</p>

<ul>
<li>en: <a href="https://github.com/kamem/jquery.dataExtend" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.dataExtend</a>
</li>
<li>ja: <a href="http://qiita.com/kamem/items/94e974a0212396d97ed7" class="autolink" id="reference-6a51c9189fe98e91c3cf">http://qiita.com/kamem/items/94e974a0212396d97ed7</a>
</li>
</ul>

<h2>
<span id="install" class="fragment"></span><a href="#install"><i class="fa fa-link"></i></a>Install</h2>

<h3>
<span id="bower" class="fragment"></span><a href="#bower"><i class="fa fa-link"></i></a>Bower</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>bower install jquery.scrollParallax
</pre></div></div>

<h3>
<span id="npm" class="fragment"></span><a href="#npm"><i class="fa fa-link"></i></a>Npm</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>npm install jquery.scroll-parallax
</pre></div></div>

<h2>
<span id="usage" class="fragment"></span><a href="#usage"><i class="fa fa-link"></i></a>Usage</h2>

<h3>
<span id="初期設定" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$.parallax({
    stage: window,
    direction: 'y',
    debugMode: true
});
</pre></div></div>

<table>
<thead>
<tr>
<th style="text-align: left">option name</th>
<th style="text-align: left">Descriptions</th>
<th style="text-align: left">default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">stage</td>
<td style="text-align: left">スクロールさせたいwindow</td>
<td style="text-align: left"><code>window</code></td>
</tr>
<tr>
<td style="text-align: left">direction</td>
<td style="text-align: left">スクロールの方向</td>
<td style="text-align: left"><code>'y'</code></td>
</tr>
<tr>
<td style="text-align: left">debugMode</td>
<td style="text-align: left">デバック用にスクロール量を表示、timingでの実行位置を表示</td>
<td style="text-align: left"><code>false</code></td>
</tr>
</tbody>
</table>

<h3>
<span id="jquerydataextendを使用する場合" class="fragment"></span><a href="#jquerydataextend%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a><code>jquery.dataExtend</code>を使用する場合</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$('.parallax-timing').dataExtend('parallaxTiming');
$('.parallax-speed').dataExtend('parallaxSpeed');
$('.parallax-fit').dataExtend('parallaxFit');
</pre></div></div>

<p>classは任意の値を入れてください。<br>
これにより上記のclassをつけたタグにはdata属性でoptionを指定することができます。</p>

<h3>
<span id="timing" class="fragment"></span><a href="#timing"><i class="fa fa-link"></i></a>timing</h3>

<p>任意の位置にスクロール量が来た時に関数を実行する</p>

<h4>
<span id="初期設定-1" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A-1"><i class="fa fa-link"></i></a>初期設定</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$.parallaxTiming({
    timingLinePercent: 50
});
</pre></div></div>

<table>
<thead>
<tr>
<th style="text-align: left">option name</th>
<th style="text-align: left">Descriptions</th>
<th style="text-align: left">default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">timingLinePercent</td>
<td style="text-align: left">タイミングの位置をどこに設定するか（windowの幅での割合）</td>
<td style="text-align: left"><code>50</code></td>
</tr>
</tbody>
</table>

<h4>
<span id="動作" class="fragment"></span><a href="#%E5%8B%95%E4%BD%9C"><i class="fa fa-link"></i></a>動作</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(el).parallaxTiming(
    fixScrollPosition: null,
    start: null,
    end: null,
    toggle: []
);
</pre></div></div>

<table>
<thead>
<tr>
<th style="text-align: left">option name</th>
<th style="text-align: left">Descriptions</th>
<th style="text-align: left">default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">fixScrollPosition</td>
<td style="text-align: left">スクロール位置がこの位置にきた時に関数が実行される、もしも値が<code>null</code>の場合は指定したタグのoffset().topを代入します。</td>
<td style="text-align: left"><code>null</code></td>
</tr>
<tr>
<td style="text-align: left">start</td>
<td style="text-align: left">上から下に向かって通過した場合に実行される関数</td>
<td style="text-align: left"><code>null</code></td>
</tr>
<tr>
<td style="text-align: left">end</td>
<td style="text-align: left">下から上に向かって通過した場合に実行される関数</td>
<td style="text-align: left"><code>null</code></td>
</tr>
<tr>
<td style="text-align: left">toggle</td>
<td style="text-align: left">上から下に向かって通過した場合: 配列の1番目を実行, 下から上に向かって通過した場合: 配列の2番目を実行</td>
<td style="text-align: left"><code>[]</code></td>
</tr>
</tbody>
</table>

<h4>
<span id="例" class="fragment"></span><a href="#%E4%BE%8B"><i class="fa fa-link"></i></a>例）</h4>

<p>2つとも同じ意味です</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(el).parallaxTiming({
    start: function(e) {
        console.log('start')
    },
    end: function(e) {
        console.log('end')
    }
});

$(el).parallaxTiming({
    toggle: [
        function(e) {
            console.log('start')
        },
        function(e) {
            console.log('end')
        }
    ]
});
</pre></div></div>

<p>※ 引数に<code>isOver</code>と<code>target</code>が返されます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>function(e) {
    console.log(e.isOver); //ラインを超えているか
    console.log(e.target); //どのコンテンツの関数が反応したのか
}
</pre></div></div>

<h4>
<span id="例jquerydataextendを使用した場合" class="fragment"></span><a href="#%E4%BE%8Bjquerydataextend%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>例）<code>jquery.dataExtend</code>を使用した場合</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p class="parallax-timing" data-start="start" data-end="end"&gt;Test&lt;/p&gt;
</pre></div></div>

<p>このタグの位置を<code>fixScrollPosition</code>で指定した位置が通過した場合に関数を実行します。<br>
※ fixScrollPositionを省略している場合は指定したタグのoffset().topが基準になります。</p>

<ul>
<li>上から下に通過した場合に<code>global</code>にある<code>start</code>を実行</li>
<li>下から上に通過した場合に<code>global</code>にある<code>end</code>を実行</li>
</ul>

<h3>
<span id="speed" class="fragment"></span><a href="#speed"><i class="fa fa-link"></i></a>speed</h3>

<p>スクロール量に応じてcssを変化させる</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(el).parallaxSpeed({
    style: 'top',
    speed: 2,
    min: -999999,
    max: 999999,
    fixStyleValue: String($element.css(style)),
    fixScrollPosition: 0
});
</pre></div></div>

<table>
<thead>
<tr>
<th style="text-align: left">option name</th>
<th style="text-align: left">Descriptions</th>
<th style="text-align: left">default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">style</td>
<td style="text-align: left">変化させたいcssの値</td>
<td style="text-align: left"><code>'top'</code></td>
</tr>
<tr>
<td style="text-align: left">speed</td>
<td style="text-align: left">スクロール量 / speed ので値を変化させる</td>
<td style="text-align: left"><code>2</code></td>
</tr>
<tr>
<td style="text-align: left">min</td>
<td style="text-align: left">最小値</td>
<td style="text-align: left"><code>-999999</code></td>
</tr>
<tr>
<td style="text-align: left">max</td>
<td style="text-align: left">最大値</td>
<td style="text-align: left"><code>999999</code></td>
</tr>
<tr>
<td style="text-align: left">fixStyleValue</td>
<td style="text-align: left">希望のstyle、コンテンツのfix時のsyle、nullの場合はcssで予め指定していたstyleが代入されます。</td>
<td style="text-align: left"><code>null</code></td>
</tr>
<tr>
<td style="text-align: left">fixScrollPosition</td>
<td style="text-align: left">スクロールが<code>fixScrollPosition</code>の位置に来た時に希望の位置（fixStyleValue）にコンテンツがfixします。</td>
<td style="text-align: left"><code>0</code></td>
</tr>
</tbody>
</table>

<h4>
<span id="例-1" class="fragment"></span><a href="#%E4%BE%8B-1"><i class="fa fa-link"></i></a>例）</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(el).parallaxSpeed {
    sytle: 'left',
    speed: 0.5
    fixScrollPosition: 300
}
</pre></div></div>

<h4>
<span id="例jquerydataextendを使用した場合-1" class="fragment"></span><a href="#%E4%BE%8Bjquerydataextend%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88-1"><i class="fa fa-link"></i></a>例）<code>jquery.dataExtend</code>を使用した場合</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p class="parallax-speed" data-style="left" data-speed="0.5" data-fix-scroll-position="300"&gt;Test&lt;/p&gt;
</pre></div></div>

<h4>
<span id="応用編" class="fragment"></span><a href="#%E5%BF%9C%E7%94%A8%E7%B7%A8"><i class="fa fa-link"></i></a>応用編</h4>

<p>各オプションは配列で指定することができます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(el).parallaxSpeed {
    sytle: ['top', 'left', 'background-color'],
    speed: [0.5, 2, 2],
    min: [100, 100, [100,10,0]],
    max: [500, 500, [255,255,200]] //rba(100, 100, 100)のような値も指定できます。
    fixScrollPosition: 300
}
</pre></div></div>

<h4>
<span id="jquerydataextendを使用した場合" class="fragment"></span><a href="#jquerydataextend%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a><code>jquery.dataExtend</code>を使用した場合</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p class="parallax-speed"
    data-style="['top', 'left', 'background-color']"
    data-speed="[0.5, 2, 2]"
    data-min="[0.5, 2, 2]"
    data-max="[500, 500, [255,255,200]]"
    data-fix-scroll-position="300"&gt;Test&lt;/p&gt;
</pre></div></div>

<h4>
<span id="コンテンツ幅がウィンドウの幅によって変わる場合の対処方法" class="fragment"></span><a href="#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E5%B9%85%E3%81%8C%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E3%81%AE%E5%B9%85%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E5%A4%89%E3%82%8F%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>コンテンツ幅がウィンドウの幅によって変わる場合の対処方法</h4>

<p>下記のようにタグを指定することでそのタグの<code>offset().top</code>からの位置を<code>fixScrollPosition</code>とすることができます。<br>
基準の位置から微調整したい場合は<code>,</code>で区切り値を入れてください。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>fixScrollPosition: '#main,+100'
</pre></div></div>

<h3>
<span id="fit" class="fragment"></span><a href="#fit"><i class="fa fa-link"></i></a>fit</h3>

<p>移動距離に応じてcssを変化させる</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(el).parallaxFit({
    start: 0,
    end: 500,
    fromStyle: {
        top: '100px'
    },
    toStyle: {
        top: '700px'
    },
    easing: 'easeInOutBack',
});
</pre></div></div>

<table>
<thead>
<tr>
<th style="text-align: left">option name</th>
<th style="text-align: left">Descriptions</th>
<th style="text-align: left">default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">start</td>
<td style="text-align: left">移動を始めるスクロール位置</td>
<td style="text-align: left"><code>null</code></td>
</tr>
<tr>
<td style="text-align: left">end</td>
<td style="text-align: left">移動が終わるスクロール位置</td>
<td style="text-align: left"><code>null</code></td>
</tr>
<tr>
<td style="text-align: left">toStyle</td>
<td style="text-align: left">始めのcss（cssは文字列で指定してください）</td>
<td style="text-align: left"><code>null</code></td>
</tr>
<tr>
<td style="text-align: left">fromStyle</td>
<td style="text-align: left">終わりのcss（cssは文字列で指定してください）</td>
<td style="text-align: left"><code>null</code></td>
</tr>
<tr>
<td style="text-align: left">easing</td>
<td style="text-align: left">
<a href="http://semooh.jp/jquery/cont/doc/easing/" rel="nofollow noopener" target="_blank">easing plugin</a>の名前を指定</td>
<td style="text-align: left"><code>null</code></td>
</tr>
</tbody>
</table>

<h4>
<span id="例jquerydataextendを使用した場合-2" class="fragment"></span><a href="#%E4%BE%8Bjquerydataextend%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88-2"><i class="fa fa-link"></i></a>例）<code>jquery.dataExtend</code>を使用した場合</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p class="parallax-fit"
    data-start="0"
    data-end="500"
    data-from-style="{'top': '100px'}"
    data-to-style="{'top': '400px'}"
    data-easing="easeInOutBack"&gt;Test&lt;/p&gt;
</pre></div></div>

<h4>
<span id="応用編-1" class="fragment"></span><a href="#%E5%BF%9C%E7%94%A8%E7%B7%A8-1"><i class="fa fa-link"></i></a>応用編</h4>

<p><code>motion1Start</code>のようにmotionをつなげていくことでmotionを複数指定できます。</p>

<ul>
<li>startを省略すると過去の<code>end</code>の値を参照します。</li>
<li>fromを省略すると過去の<code>to</code>の値を参照します。</li>
<li>参照した結果<code>to</code>の値がない場合はcssで指定している値を見にいきます。</li>
</ul>

<hr>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(el).parallaxFit({
    start: 0,
    end: 500,
    fromStyle: {
        top: '100px'
    },
    toStyle: {
        top: '400px'
    },
    easing: 'easeInOutBack',

    motion1End: 700,
    motion1FromStyle: {
        left: '300px'
    },
    motion1ToStyle: {
        left: '400px'
    },
    motion1Easing: 'easeInOutBack',
});
</pre></div></div>

<h4>
<span id="ウィンドウ幅によりコンテンツ幅が変わる場合の対処方法" class="fragment"></span><a href="#%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E5%B9%85%E3%81%AB%E3%82%88%E3%82%8A%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E5%B9%85%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>ウィンドウ幅によりコンテンツ幅が変わる場合の対処方法</h4>

<p>下記のようにタグを指定することでそのタグの<code>offset().top</code>からの位置を<code>start</code>とすることができます。<br>
基準の位置から微調整したい場合は<code>,</code>で区切り、値を入れてください。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(el).parallaxFit({
    start: '#main',
    end:'#main,+100',
</pre></div></div>

<h4>
<span id="ウィンドウ幅変更によりスクロールがコンテンツ位置に到達しない場合の最初方法" class="fragment"></span><a href="#%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E5%B9%85%E5%A4%89%E6%9B%B4%E3%81%AB%E3%82%88%E3%82%8A%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%81%8C%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E4%BD%8D%E7%BD%AE%E3%81%AB%E5%88%B0%E9%81%94%E3%81%97%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E6%9C%80%E5%88%9D%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>ウィンドウ幅変更により、スクロールがコンテンツ位置に到達しない場合の最初方法</h4>

<p><code>lastScrollPosition</code>をスクロールの最後の位置を取得できます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(el).parallaxSpeed({
    fixScrollPosition: 'lastScrollPosition'
})

$(el).parallaxFit({
    start: '#main',
    end: 'lastScrollPosition',
</pre></div></div>
]]></content>
        <published>2015-12-13T07:27:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacからWindows10に移行したときになるべく違和感がなくなるような設定]]></title>
        <id>db0b7970d5bde16ff6e7</id>
        <link href="https://clover.blue/items/db0b7970d5bde16ff6e7">
        </link>
        <updated>2017-11-07T07:16:56.000Z</updated>
        <content type="html"><![CDATA[<p>最近Surfaceを買いました。</p>

<p>久し振りにWindowsを使ったという事もあって、<br>
Macの感覚でそのまま使おうとしたら、操作にかなり違和感があってなかなか大変でした。</p>

<p>なるべく操作をMacに近づけるためにいろいろ設定を変更したので<br>
設定方法をメモしておこうと思います。</p>

<h2>
<span id="macのように文字入力の切替を行いたい半角全角英数の変換" class="fragment"></span><a href="#mac%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E6%96%87%E5%AD%97%E5%85%A5%E5%8A%9B%E3%81%AE%E5%88%87%E6%9B%BF%E3%82%92%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84%E5%8D%8A%E8%A7%92%E5%85%A8%E8%A7%92%E8%8B%B1%E6%95%B0%E3%81%AE%E5%A4%89%E6%8F%9B"><i class="fa fa-link"></i></a>Macのように文字入力の切替を行いたい（半角、全角、英数の変換）</h2>

<ol>
<li><p>まずはgoogle日本語入力をダウンロード<br>
<a href="https://www.google.co.jp/ime/" rel="nofollow noopener" target="_blank">google 日本語入力</a></p></li>
<li><p>Google日本語入力のプロパティを開き主に下記のように変更します。</p></li>
</ol>

<ul>
<li>Henkanを 「IMEを有効化」</li>
<li>Muhenkan「IMEを無効化」</li>
</ul>

<p><a href="http://johokankyo.com/diary/keyboard_mac_like/" rel="nofollow noopener" target="_blank"> Windowsキーボードで、Macのように文字入力の切り替えをしたい</a></p>

<p>下記、引用です</p>

<blockquote>
<p>まずは、「モード」列の「変換前入力中」の中にある「入力キー」列で「Henkan」と表示されている行で、「コマンド」列部分をクリックして一覧から「IMEを有効化」に切り替えます。<br>
続いて「Muhenkan」の行では「IMEを無効化」を選びます。<br>
同様にして、モード列の「変換中」、「直接入力」、「文字入力なし」も、「Henkan」は「IMEを有効化」に、「Muhenkan」は「IMEを無効化」に、それぞれ切り替えます。</p>
</blockquote>

<h2>
<span id="command-keyとctrlaltwindows-keyの配置について" class="fragment"></span><a href="#command-key%E3%81%A8ctrlaltwindows-key%E3%81%AE%E9%85%8D%E7%BD%AE%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>Command KeyとCtrl、Alt、windows keyの配置について</h2>

<p>下記などのフリーソフトを使ってキー配置を入れ替えましょう。</p>

<ul>
<li><a href="http://blog.goo.ne.jp/ashm314/e/b8ea64c00ad8921af9ff06b738938cb4" rel="nofollow noopener" target="_blank">ThinkPad E540 奮闘記［10］：キー入れ替えソフト（KeyTweak）</a></li>
<li><a href="http://forest.watch.impress.co.jp/library/software/changekey/" rel="nofollow noopener" target="_blank">Change Key</a></li>
</ul>

<p>私は「Change Key」を使わせていただきました。<br>
操作は直感的（変更したいキーを選択して、変更後のキーを選択するだけ）なので<br>
簡単かと思います。</p>

<p>アイコンを右クリックして「管理者として実行」で実行しないと変更後の保存ができないためその点気をつけましょう。</p>

<table>
<thead>
<tr>
<th style="text-align: left">変更前</th>
<th style="text-align: right">変更後</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">Alt</td>
<td style="text-align: right">Ctrl右</td>
</tr>
<tr>
<td style="text-align: left">Caps 英数</td>
<td style="text-align: right">Ctrl左</td>
</tr>
<tr>
<td style="text-align: left">windows</td>
<td style="text-align: right">Alt</td>
</tr>
<tr>
<td style="text-align: left">Ctrl</td>
<td style="text-align: right">Caps 英数</td>
</tr>
</tbody>
</table>

<p>※ ただしFnキーの変更はできないようです。（できたらいいのになぁ。。）</p>

<h2>
<span id="command--tabなどのショートカットについて" class="fragment"></span><a href="#command--tab%E3%81%AA%E3%81%A9%E3%81%AE%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>Command + Tabなどのショートカットについて</h2>

<p>WindowsとMacでショートカットの違いが多いのもとまどうところです。<br>
<code>Command + Tab</code>などアプリを切り替えたいときによく使っていたのですが<br>
標準ではAlt + Tabのため直感的に操作できずにいらいら。。<br>
下記ツールをつかって解決しました。</p>

<ul>
<li>ショートカットを変更してくれるツール
<a href="https://autohotkey.com/" rel="nofollow noopener" target="_blank">AutoHotkey</a>
</li>
</ul>

<p>コードをかいてショートカットを変更する必要があるのですが、そんなに難しくないです<br>
自分が変更したコードを貼っておきます。<br>
インストール後<code>.ahk</code>という拡張子をつけて保存して実行します。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>Ctrl &amp; Tab::AltTab
PgUp::#d
Alt &amp; Space::Send,#s
AppsKey &amp; Backspace::Send,{Delete}
LCtrl &amp; LButton::Send,{RButton}
</pre></div></div>

<h3>
<span id="変更したところ" class="fragment"></span><a href="#%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D"><i class="fa fa-link"></i></a>変更したところ</h3>

<table>
<thead>
<tr>
<th style="text-align: left">用途</th>
<th style="text-align: left">変更前</th>
<th style="text-align: right">変更後</th>
<th style="text-align: right">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">アプリの切替</td>
<td style="text-align: left">Alt + Tab</td>
<td style="text-align: right">Ctrl &amp; Tab</td>
<td style="text-align: right"></td>
</tr>
<tr>
<td style="text-align: left">デスクトップの表示</td>
<td style="text-align: left">windows + d</td>
<td style="text-align: right">PgUp</td>
<td style="text-align: right">mac f11の再現</td>
</tr>
<tr>
<td style="text-align: left">cortanaの呼び出し</td>
<td style="text-align: left">windows + s</td>
<td style="text-align: right">Alt &amp; Space</td>
<td style="text-align: right">macのAlfredのショートカットを再現</td>
</tr>
<tr>
<td style="text-align: left">Delete</td>
<td style="text-align: left">新しく追加</td>
<td style="text-align: right">AppsKey &amp; Backspace</td>
<td style="text-align: right">macのfn + deleteを再現</td>
</tr>
<tr>
<td style="text-align: left">右クリック</td>
<td style="text-align: left">新しく追加</td>
<td style="text-align: right">Ctrl左 &amp; 右クリック</td>
<td style="text-align: right"></td>
</tr>
</tbody>
</table>

<h2>
<span id="windowsでbashを使う" class="fragment"></span><a href="#windows%E3%81%A7bash%E3%82%92%E4%BD%BF%E3%81%86"><i class="fa fa-link"></i></a>Windowsでbashを使う</h2>

<p>windowsのコマンドラインツール...cdできないlsできない..といろいろ大変でした。</p>

<p>詳しくは下記ページに画像つきで説明されております。長くなってしまうのと<br>
内容かぶってしまうので詳細は下記をみていただければと思います。</p>

<p>最近「Bash on Ubuntu on Windows」のがあり簡単にbashがつかえました。<br>
<a href="https://qiita.com/Aruneko/items/c79810b0b015bebf30bb" id="reference-d054bf1df9391ce635c4">Bash on Ubuntu on Windowsをインストールしてみよう！</a></p>

<h2>
<span id="iterm2みたいなのがほしい" class="fragment"></span><a href="#iterm2%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%81%AE%E3%81%8C%E3%81%BB%E3%81%97%E3%81%84"><i class="fa fa-link"></i></a>iTerm2みたいなのがほしい</h2>

<p>下記を使いました。便利。<br>
<a href="http://cmder.net/" rel="nofollow noopener" target="_blank">Cmder</a></p>

<h3>
<span id="cmderで矢印が使えない問題" class="fragment"></span><a href="#cmder%E3%81%A7%E7%9F%A2%E5%8D%B0%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84%E5%95%8F%E9%A1%8C"><i class="fa fa-link"></i></a>Cmderで矢印が使えない問題</h3>

<p>そのままだと矢印移動ができない問題があるようです。</p>

<p><a href="https://qiita.com/goldbook@github/items/b78c959898e0aea98a4e" id="reference-6912dfb78091114c0d9e">BashOnWindowsを快適に使うための設定</a></p>

<ol>
<li><p>Settings &gt; Tasksタブより 左下 <code>+</code>を教えてタスクを追加します。<br>
右下の大きめのエリアに下記を入力します。（zshを使用しない場合は<code>-c zsh</code>を外すこと）<br>
<code><br>
C:\Windows\System32\bash.exe ~ -c zsh -cur_console:p<br>
</code></p></li>
<li><p><code>Default Task for new console</code>にも合わせてチェックを付けておいて新しく立ち上がった場合もdefaultでこのタスクが開くようにしておきます。あとは名前をつけて保存します。</p></li>
<li><p>続いて左のリストからStartupを選択して<code>Specified named task</code>を今作ったタスクに変更して、起動時にもこのタスクで開くようにしましょう。</p></li>
</ol>

<p>参考<br>
<a href="https://qiita.com/koduki/items/ab68b917b8dbc7d51af0" id="reference-a3ed3cb300928586315e">Windows Subsystem for Linux ＋ Cmderで最強のCLI環境を作る</a><br>
画像つきでわかりやすく説明されてます。</p>

<p>※ 個人的に<code>zsh</code>、<code>oh-my-zsh</code>を使用しています。普通にubuntuにインストールするのとあまり変わらなかったため割愛。</p>

<h3>
<span id="bashのの向き先を変える" class="fragment"></span><a href="#bash%E3%81%AE%E3%81%AE%E5%90%91%E3%81%8D%E5%85%88%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B"><i class="fa fa-link"></i></a>bashの<code>~/</code>の向き先を変える</h3>

<p>下記コマンドを実行したときの移動先を変更しました。<br>
そのままだとubuntu側のhomeに移動してしまうためwindows側のhomeにしました。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>cd ~/
</pre></div></div>

<p><a href="https://qiita.com/ryo-yamaoka/items/9db1a8643144565de103#mnt%E9%85%8D%E4%B8%8B%E3%81%AB%E7%A7%BB%E5%8B%95%E3%81%99%E3%82%8B%E3%81%AE%E3%81%AF%E9%9D%A2%E5%80%92%E9%81%95%E5%92%8C%E6%84%9F%E3%82%92%E4%BD%95%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84" id="reference-2933e6bb2c453b9a5325">Bash on Windowsで真面目に開発環境を整備する: /mnt配下に移動するのは面倒、違和感を何とかしたい</a></p>

<blockquote>
<p>安全策で行くのならばそれ用のディレクトリを作った上で/home/usernameに/mnt/c/Users/username/BoWという具合にエイリアスを張るのがよいでしょう。<br>
（BoWディレクトリは他の場所や名前でも大丈夫）<br>
私はちょっと思い切ってWindows側で/etc/passwdのホームディレクトリを/mnt/c/Users/username/BoW配下に変更してしまいました。<br>
こんな感じです。<br>
<code><br>
username:x:1000:1000:"",,,:/mnt/c/Users/username/BoW:/bin/bash<br>
</code></p>
</blockquote>

<p>変更してみましたが、今後もしかしたら弊害があるかもしれないのでちょっと様子見です。<br>
安全に行くなら書いてある通りエイリアスを貼るのが良い気がします。</p>

<h2>
<span id="macでのopenコマンドの追加" class="fragment"></span><a href="#mac%E3%81%A7%E3%81%AEopen%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E8%BF%BD%E5%8A%A0"><i class="fa fa-link"></i></a>Macでの「openコマンド」の追加</h2>

<p><a href="https://qiita.com/chez_sugi/items/603a0ba8016aaae9ef98" id="reference-d0d92736b3182da332f8">Bash on Windowsでmacのopenコマンドみたいなこと</a></p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre> alias open="cmd.exe /c start"
</pre></div></div>

<p>### Atomをコマンドから起動する<br>
 editorはatomを使ってるのでatomもコマンドから起動できるようにしておくと便利です。</p>

<p><a href="http://dmingn.hatenablog.com/entry/2017/04/24/061616" rel="nofollow noopener" target="_blank">Bash on Ubuntu on Windows から Windows 側の atom を起動する</a></p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>alias atom='cmd.exe /C "C:\Users\(username)\AppData\Local\atom\bin\atom.cmd"'
</pre></div></div>

<h2>
<span id="3本指ドラッグの代わりにクリックロックを使ってみる" class="fragment"></span><a href="#3%E6%9C%AC%E6%8C%87%E3%83%89%E3%83%A9%E3%83%83%E3%82%B0%E3%81%AE%E4%BB%A3%E3%82%8F%E3%82%8A%E3%81%AB%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%83%AD%E3%83%83%E3%82%AF%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B"><i class="fa fa-link"></i></a>3本指ドラッグの代わりに「クリックロック」を使ってみる</h2>

<p>3本指ドラッグができないので、ちょっと試しに使ってみてます。<br>
まだ使い始めなので使い勝手がわからないですが、他に弊害出る可能性もあるので<br>
タッチパッドのドラッグがちょっとなーって方は試してみてもよいかもっ。</p>

<p><a href="https://www.digimonostation.jp/0000108817/" rel="nofollow noopener" target="_blank">タッチパッドで「ドラッグ」が苦手な人に。Windows 10の「クリックロック」が超便利！</a></p>

<h2>
<span id="スペースでプレビュー機能を追加" class="fragment"></span><a href="#%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%81%A7%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E6%A9%9F%E8%83%BD%E3%82%92%E8%BF%BD%E5%8A%A0"><i class="fa fa-link"></i></a>スペースでプレビュー機能を追加</h2>

<p><a href="https://forest.watch.impress.co.jp/docs/news/1067001.html" rel="nofollow noopener" target="_blank">WinQuickLook</a></p>

<h2>
<span id="今後できたらmacに合わせたいところ" class="fragment"></span><a href="#%E4%BB%8A%E5%BE%8C%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%89mac%E3%81%AB%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F%E3%81%84%E3%81%A8%E3%81%93%E3%82%8D"><i class="fa fa-link"></i></a>今後できたらMacに合わせたいところ</h2>

<ul>
<li>3本ゆびドラッグでのドラッグ＆ドロップ</li>
<li>Fnキーをどうにかしたい。</li>
</ul>

<h2>
<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h2>

<p>いろいろ設定しなおしちゃいましたが、<br>
ようやくMacと併用して使ってもそこまで違和感なく使えるようになったと思います。<br>
また今後変更した点などあれば追記していきたいと思います。</p>
]]></content>
        <published>2017-10-15T17:11:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQueryPluginを作ってnpmで公開するまでの流れと構成]]></title>
        <id>dabc1bca30486283cc75</id>
        <link href="https://clover.blue/items/dabc1bca30486283cc75">
        </link>
        <updated>2017-04-01T15:16:42.000Z</updated>
        <content type="html"><![CDATA[<p>最近はがっつりjQueryでーって言うのも少なくなってきているかもしれないですが</p>

<p>細かいものを作ったときにプラグインとしてまとめておくとあとあと<br>
自分でもnpm installして使うーってことができるので良いかなと思ってます。</p>

<p>いままでもプラグインをいくつか作っていてのですが<br>
npmに登録するまでなかなか行かないって場合が多かったです。</p>

<p>最近は昔のを整理してnpmに公開するようにしているので</p>

<p>最初の構成（starter-kit的なの）と<br>
ざっくりですが公開するまでの流れをメモっておこうかと思います！</p>

<p><a href="https://github.com/kamem/jquery.plugin.starter-kit" rel="nofollow noopener" target="_blank">jquery.plugin.starter-kit</a></p>

<h2>
<span id="まずはじめに" class="fragment"></span><a href="#%E3%81%BE%E3%81%9A%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>まずはじめに</h2>

<h3>
<span id="packagejson" class="fragment"></span><a href="#packagejson"><i class="fa fa-link"></i></a>package.json</h3>

<p>npmに登録するときに必要です。<br>
最低限下記の項目を今回作るプラグインに合わせて修正しましょう</p>

<h4>
<span id="name" class="fragment"></span><a href="#name"><i class="fa fa-link"></i></a>name</h4>

<p>プラグインの名前 (npmに登録するときの名前です)<br>
キャメルケースだと登録できないようなのでハイフンケースで名前をつけるようにしましょう。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>// キャメルケース ☓
jquery.testPlugin x

// ハイフンケース ○
jquery.test-plugin
</pre></div></div>

<h4>
<span id="version" class="fragment"></span><a href="#version"><i class="fa fa-link"></i></a>version</h4>

<p>プラグインのバージョン（なにか修正するたびにバージョンをアップしましょう）</p>

<h4>
<span id="description" class="fragment"></span><a href="#description"><i class="fa fa-link"></i></a>description</h4>

<p>プラグインの説明文（npmのプラグイン説明欄に標示されます）</p>

<h4>
<span id="author" class="fragment"></span><a href="#author"><i class="fa fa-link"></i></a>author</h4>

<p>自分用に設定しましょう</p>

<h4>
<span id="repository" class="fragment"></span><a href="#repository"><i class="fa fa-link"></i></a>repository</h4>

<p>このプラグインのリポジトリ情報<br>
このプラグインに合わせて設定しなおしましょう。</p>

<h4>
<span id="license" class="fragment"></span><a href="#license"><i class="fa fa-link"></i></a>license</h4>

<p>ライセンス情報。自分はプラグインを公開する際はMITで公開しています。</p>

<h4>
<span id="main" class="fragment"></span><a href="#main"><i class="fa fa-link"></i></a>main</h4>

<p>吐き出されたmainのjsファイルの位置を示します。<br>
ここを描いておくことでwebpackを使ってimportする際にここのファイルを見に行ってくれるようになります。</p>

<h4>
<span id="keywords" class="fragment"></span><a href="#keywords"><i class="fa fa-link"></i></a>keywords</h4>

<p>プラグインに関わるキーワード（複数可）</p>

<h2>
<span id="プラグインを作り始めるときのキット" class="fragment"></span><a href="#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8A%E5%A7%8B%E3%82%81%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E3%82%AD%E3%83%83%E3%83%88"><i class="fa fa-link"></i></a>プラグインを作り始めるときのキット</h2>

<p>プラグインを作り始めるときにいろいろと用意するのが大変なので<br>
ES6でさくっと書けるようなstarter-kit的なのを用意しました。</p>

<p><a href="https://github.com/kamem/jquery.plugin.starter-kit" rel="nofollow noopener" target="_blank">jquery.plugin.starter-kit</a></p>

<h4>
<span id="ファイル構成とファイルの説明" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%A7%8B%E6%88%90%E3%81%A8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AC%E6%98%8E"><i class="fa fa-link"></i></a>ファイル構成とファイルの説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>├── LICENSE.txt // ライセンス情報記載(src/LICENSE.txtから吐き出されます)
├── README.jp.md // 日本語のプラグイン説明
├── README.md // 英語のプラグイン説明
├── dist // 公開用プラグイン用フォルダ（src/jsの吐き出し先）
│   └── js
│       ├── jquery.testPlugin.js
│       └── jquery.testPlugin.min.js
├── docs // demo用フォルダ
│   ├── css // demo用css（src/cssの吐き出し先）
│   │   └── main.css
│   ├── index.html
│   └── js // プラグインで使うjsをいれてdemoで試す用
│       ├── jquery.easing.1.3.min.js
│       └── jquery.js
├── gulpfile.js // gulpのせってい
├── gulpfile_settings.js // gulpfileで使うためのフォルダ構成などが書いてあります
├── package.json // npm公開に必要
└── src // 作業用フォルダ
    ├── LICENSE.txt // package.jsonから名前情報を取得、日付を更新して吐き出します
    ├── css
    │   └── main.css // docs/css内に吐き出し
    └── js // フォルダ内のファイルをpackage.jsonからプラグイン名、日付、名前などをcopyrightに反映して結合しdist/jsにはき出します
        ├── copyright.js
        ├── copyright.min.js
        ├── end.js
        ├── jquery.testPlugin.jsx //package.jsonに記述したnameと同じ名前になるようになっています。（こっちはキャメルケースになるようにしているので注意！）
        └── start.js // requireが使えるような記述がかいてあります。
</pre></div></div>

<h4>
<span id="初め方" class="fragment"></span><a href="#%E5%88%9D%E3%82%81%E6%96%B9"><i class="fa fa-link"></i></a>初め方</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>npm install
</pre></div></div>

<h4>
<span id="作業開始" class="fragment"></span><a href="#%E4%BD%9C%E6%A5%AD%E9%96%8B%E5%A7%8B"><i class="fa fa-link"></i></a>作業開始</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>npm run watch
</pre></div></div>

<p>この<code>command</code>を実行すると<code>src</code>フォルダ内のファイルを編集したときに<br>
dist内にファイルを吐き出すことができるようになっています。</p>

<p>あとはsrc内のファイルをいじってプラグインをつくっていけばOKです。<br>
下記をブラウザで確認すれば<code>docs/index.html</code>を確認できるのでプラグインを作る際はここで確認して下さい。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>http://localhost:8888/docs/
</pre></div></div>

<p><code>index.html</code>内コメントアウトしてますが、下記で作りながら確認していくことができます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script src="../dist/js/jquery.test.js"&gt;&lt;/script&gt;
</pre></div></div>

<p>プラグイン公開前は下記内に移動しましょう（そうしないとgithub pageのデモとして動作しないため）</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script src="js/jquery.testPlugin.js"&gt;&lt;/script&gt;
</pre></div></div>

<h5>
<span id="jsについて" class="fragment"></span><a href="#js%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>jsについて</h5>

<p>このときのjsはes6が使えるようになっています。</p>

<p>requireはwebpackはプラグインとしてはファイルサイズが重くなってしまうため<br>
<a href="https://www.npmjs.com/package/gulp-amdclean" rel="nofollow noopener" target="_blank">amd-clean</a>を使っています。</p>

<p>まぁ特に気にすることないはずです。</p>

<h5>
<span id="cssについて" class="fragment"></span><a href="#css%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>cssについて</h5>

<p>postcssを使っています。<br>
<code>src/css</code>のファイルは<code>docs/css</code>にはき出されます。</p>

<h5>
<span id="docsについて" class="fragment"></span><a href="#docs%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>docsについて</h5>

<p>docsはgithubの昨日でgithub pageとして公開することができます。<br>
プラグインのデモをつくって公開しましょう。</p>

<h5>
<span id="changelogの自動化" class="fragment"></span><a href="#changelog%E3%81%AE%E8%87%AA%E5%8B%95%E5%8C%96"><i class="fa fa-link"></i></a>CHANGELOGの自動化</h5>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>npm run changes
</pre></div></div>

<p>tagを切ってから<code>npm run changes</code>を実行してください。<br>
<code>git repository</code>のrelease 情報をみて自動で<code>CHANGELOG.md</code>を作ってくれます。</p>

<h2>
<span id="npmに公開する" class="fragment"></span><a href="#npm%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>NPMに公開する</h2>

<h3>
<span id="タグを切るのを忘れずに" class="fragment"></span><a href="#%E3%82%BF%E3%82%B0%E3%82%92%E5%88%87%E3%82%8B%E3%81%AE%E3%82%92%E5%BF%98%E3%82%8C%E3%81%9A%E3%81%AB"><i class="fa fa-link"></i></a>タグを切るのを忘れずに</h3>

<p><a href="https://github.com/kamem/jquery.plugin.starter-kit/releases" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.plugin.starter-kit/releases</a><br>
package.jsonに記述したバージョンと同じバージョンのタグを切ってあげましょう。</p>

<h3>
<span id="コマンド実行して公開" class="fragment"></span><a href="#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E5%85%AC%E9%96%8B"><i class="fa fa-link"></i></a>コマンド実行して公開</h3>

<p>下記の<code>command</code>をpackage.jsonと同フォルダで実行するとnpmに公開することができます。<br>
またバージョンアップするときも同じコマンドを打てばでいけるので便利です。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>npm publish
</pre></div></div>

<p>updateするときもpackage.jsonバージョンアップしてタグをきってから<code>npm publish</code>することを忘れずに！</p>

<p>※ バージョンもnpmのコマンドでやってくれるみたい<br>
<a href="http://yosuke-furukawa.hatenablog.com/entry/2014/06/10/100410" class="autolink" rel="nofollow noopener" target="_blank">http://yosuke-furukawa.hatenablog.com/entry/2014/06/10/100410</a></p>

<h2>
<span id="今後対応したい" class="fragment"></span><a href="#%E4%BB%8A%E5%BE%8C%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%9F%E3%81%84"><i class="fa fa-link"></i></a>今後対応したい</h2>

<ul>
<li>テストの実装</li>
</ul>
]]></content>
        <published>2017-03-27T14:10:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[スムーズにスクロールするjQueryプラグイン]]></title>
        <id>c94c4dc75516b36f3766</id>
        <link href="https://clover.blue/items/c94c4dc75516b36f3766">
        </link>
        <updated>2017-03-26T06:50:03.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>Github: <a href="https://github.com/kamem/jquery.smoothPageScroll" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.smoothPageScroll</a>
</li>
</ul>

<p>今までnpmに登録していなかったので作りなおして登録しましたっ！</p>

<p>スムーズにスクロールするプラグインは色々あるのですが、<br>
必要な機能を備えたプラグインが見つからなかったので作ってみました。</p>

<p>前々からつくってはいたのですが、<br>
昔の拙いコードが残っていたので少し整理しました。</p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ol>
<li>アンカーで移動後にアドレスを変更（アドレスにハッシュを付与する）。</li>
<li>座標を指定してのページ内リンク。</li>
<li>ロード時にページの先頭からハッシュの位置までスムーズに移動することができる。</li>
<li>移動完了後に指定した関数を実行。</li>
<li>スクロール途中、マウススクロールしたときにカクカクした動きをする問題をスクロールをストップすることで回避。</li>
<li>スクロール途中に画面をクリックした場合にスクロールが止まる。</li>
</ol>

<h2>
<span id="デモ" class="fragment"></span><a href="#%E3%83%87%E3%83%A2"><i class="fa fa-link"></i></a>デモ</h2>

<p><a href="http://github.develo.org/jquery.smoothPageScroll/example/" rel="nofollow noopener" target="_blank">DEMO</a></p>

<h2>
<span id="必要なプラグイン" class="fragment"></span><a href="#%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3"><i class="fa fa-link"></i></a>必要なプラグイン</h2>

<ul>
<li>jquery</li>
<li><a href="https://github.com/gdsmith/jquery.easing" rel="nofollow noopener" target="_blank">jquery.easing</a></li>
</ul>

<p>スクロール時の<code>animate</code>の<code>easing</code>の初期値に<code>easeOutQuart</code>を使用しているため、このプラグインが必要です。</p>

<h2>
<span id="インストール" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>インストール</h2>

<h3>
<span id="npm" class="fragment"></span><a href="#npm"><i class="fa fa-link"></i></a>Npm</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>npm install jquery.smooth-page-scroll
</pre></div></div>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script src="js/jquery.easing.js"&gt;&lt;/script&gt;
&lt;script src="js/jquery.smoothPageScroll.js"&gt;&lt;/script&gt;
&lt;script&gt;
$.smoothPageScrollByLoaded();
$('a[href^="#"]').smoothPageScroll();
&lt;/script&gt;
</pre></div></div>

<h3>
<span id="a要素以外につけたい場合" class="fragment"></span><a href="#a%E8%A6%81%E7%B4%A0%E4%BB%A5%E5%A4%96%E3%81%AB%E3%81%A4%E3%81%91%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>a要素以外につけたい場合</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$('h1').smoothPageScroll({
    target: '#header'
});
</pre></div></div>

<h3>
<span id="移動後に関数実行" class="fragment"></span><a href="#%E7%A7%BB%E5%8B%95%E5%BE%8C%E3%81%AB%E9%96%A2%E6%95%B0%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>移動後に関数実行</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$('a[href^="#"]').smoothPageScroll({
    complate: function(e) {
        console.log(e);
    }
});
</pre></div></div>

<h3>
<span id="座標を指定してリンク" class="fragment"></span><a href="#%E5%BA%A7%E6%A8%99%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a>座標を指定してリンク</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>#1000,1000
//（x, y）
</pre></div></div>

<h3>
<span id="任意のタイミングでスクロールする" class="fragment"></span><a href="#%E4%BB%BB%E6%84%8F%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>任意のタイミングでスクロールする</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$.smoothPageScrollStart({
    target: '#header'
});
</pre></div></div>

<h2>
<span id="options" class="fragment"></span><a href="#options"><i class="fa fa-link"></i></a>Options</h2>

<table>
<thead>
<tr>
<th style="text-align: left">option name</th>
<th style="text-align: left">type</th>
<th style="text-align: left">Descriptions</th>
<th style="text-align: left">default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">easing</td>
<td style="text-align: left"><code>String</code></td>
<td style="text-align: left">イージングの種類</td>
<td style="text-align: left"><code>'easeOutQuart'</code></td>
</tr>
<tr>
<td style="text-align: left">speed</td>
<td style="text-align: left"><code>Number</code></td>
<td style="text-align: left">スクロールスピード</td>
<td style="text-align: left"><code>1000</code></td>
</tr>
<tr>
<td style="text-align: left">delay</td>
<td style="text-align: left"><code>Number</code></td>
<td style="text-align: left">スクロール開始までの待ち時間($('body').animate.delay(<strong>delay</strong>)</td>
<td style="text-align: left"><code>-999999</code></td>
</tr>
<tr>
<td style="text-align: left">target</td>
<td style="text-align: left">
<code>String</code> or <code>jQuery Object</code>
</td>
<td style="text-align: left">直接ターゲットを指定する (例) <code>#header</code> or <code>$(#header)</code>  ※ 値の指定がない場合は(0, 0)になります。</td>
<td style="text-align: left"><code>undefined</code></td>
</tr>
<tr>
<td style="text-align: left">complate</td>
<td style="text-align: left"><code>Function</code></td>
<td style="text-align: left">スクロール完了後に実行したい関数</td>
<td style="text-align: left"><code>''</code></td>
</tr>
<tr>
<td style="text-align: left">isAddHash</td>
<td style="text-align: left"><code>Boolean</code></td>
<td style="text-align: left">スクロール後にhashを追加するか</td>
<td style="text-align: left"><code>true</code></td>
</tr>
<tr>
<td style="text-align: left">isTopScroll</td>
<td style="text-align: left"><code>Boolean</code></td>
<td style="text-align: left">縦方向にスクロールするか</td>
<td style="text-align: left"><code>true</code></td>
</tr>
<tr>
<td style="text-align: left">isLeftScroll</td>
<td style="text-align: left"><code>Boolean</code></td>
<td style="text-align: left">横方向にスクロールするか</td>
<td style="text-align: left"><code>true</code></td>
</tr>
</tbody>
</table>

<h3>
<span id="初期設定" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>//ロード時の処理
$.smoothPageScrollByLoaded({
    easing: 'easeOutQuart',
    speed: 1000,
    complate:'',
    target: location.hash,
    isAddHash: true,
    isTopScroll: true,
    isLeftScroll: true
});

//クリック時の処理
$('a[href^="#"]').smoothPageScroll({
    easing: 'easeOutQuart',
    speed: 1000,
    delay: 0,
    target: undefined,
    complate: '',
    isAddHash: true,
    isTopScroll: true,
    isLeftScroll: true
});
</pre></div></div>
]]></content>
        <published>2016-07-31T10:34:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery Pluginをパラメーターの代わりにdata属性で代用できるプラグイン]]></title>
        <id>56a9be7163cbe30ca409</id>
        <link href="https://clover.blue/items/56a9be7163cbe30ca409">
        </link>
        <updated>2017-03-26T06:46:17.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>Github: <a href="https://github.com/kamem/jquery.pluginFromDataAttr" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.pluginFromDataAttr</a>
</li>
</ul>

<p>プラグインを複数のページなどで違う動作をしたい場合に<br>
わざわざjsを用意してパラメーターを指定し直さないければいけないのが煩わしいと思っていました。</p>

<p>その代わりにdata-*でパラメーターを指定して使うことができるjQueryプラグインです。</p>

<p><a href="http://github.develo.org/jquery.pluginFromDataAttr/" rel="nofollow noopener" target="_blank">DEMO</a></p>

<h2>
<span id="インストール" class="fragment"></span><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"><i class="fa fa-link"></i></a>インストール</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>npm install jquery.plugin-from-data-attr
</pre></div></div>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ul>
<li>
<p>下記のようなプラグインがあった場合に</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$('.tab').tab({
    timer: 1000,
    num: 1,
    isSessionStorage: true
});
</pre></div></div>
</li>
<li>
<p>下記のようにHTMLのdata属性を代わりに使うことができます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p class="tab" data-timer="1000" data-num="1" is-session-storage="true"&gt;
</pre></div></div>
</li>
</ul>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<ol>
<li>
<p>スクリプトの記述（プラグインの後にjquery.pluginFromDataAttr.jsを読むこむ）</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script src="js/jquery.tab.js"&gt;&lt;/script&gt;
&lt;script src="js/jquery.pluginFromDataAttr.js"&gt;&lt;/script&gt;
</pre></div></div>
</li>
<li>
<p>$('適応したいタグ').dataExtend('プラグイン名');</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script&gt;
$(function(){
    $('.nav').pluginFromDataAttr('tab');
});
&lt;/script&gt;
</pre></div></div>
</li>
<li>
<p>HTMLにdata属性を記述する（キャメルケースの場合「-」でつなげる）※ is-session-storage = isSessionStorage</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p class="tab" data-timer="1000" data-num="1" is-session-storage="true"&gt;
</pre></div></div>
</li>
</ol>
]]></content>
        <published>2017-03-26T06:11:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Herokuでgulpのwebserverをそのまま使う]]></title>
        <id>260856b65e7dadde7039</id>
        <link href="https://clover.blue/items/260856b65e7dadde7039">
        </link>
        <updated>2017-01-24T02:18:04.000Z</updated>
        <content type="html"><![CDATA[<p>自分でサクッとherokuで一旦公開したいときに<br>
いつも迷うのでメモしておこうと思います。</p>

<p>Herokuでアプリを作っている、Herokuにpcからログインできる状態を前提にしています。</p>

<p>GitHubに上げている場合は「Deploy」<br>
「App connected to GitHub」からリポジトリを選択して下さい。</p>

<h2>
<span id="herokuにログイン" class="fragment"></span><a href="#heroku%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3"><i class="fa fa-link"></i></a>herokuにログイン</h2>

<h3>
<span id="ログイン" class="fragment"></span><a href="#%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3"><i class="fa fa-link"></i></a>ログイン</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>heroku login

Enter your Heroku credentials.
Email: メールアドレス
Password (typing will be hidden): 
Authentication successful.
</pre></div></div>

<h3>
<span id="ログアウト" class="fragment"></span><a href="#%E3%83%AD%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88"><i class="fa fa-link"></i></a>ログアウト</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>heroku logout
Local credentials cleared.
</pre></div></div>

<h2>
<span id="herokuのアプリのhostを変更" class="fragment"></span><a href="#heroku%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AEhost%E3%82%92%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>herokuのアプリのHOSTを変更</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>heroku config:set --app &lt;アプリ名&gt; HOST=0.0.0.0
</pre></div></div>

<h2>
<span id="pagekagejsonのdevdependenciesをインストールするために" class="fragment"></span><a href="#pagekagejson%E3%81%AEdevdependencies%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB"><i class="fa fa-link"></i></a>pagekage.jsonのdevDependenciesをインストールするために</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>heroku config:set NPM_CONFIG_PRODUCTION=false
</pre></div></div>

<h2>
<span id="packagejsonのscripts" class="fragment"></span><a href="#packagejson%E3%81%AEscripts"><i class="fa fa-link"></i></a>package.jsonのscripts</h2>

<ol>
<li>priinstallでbuildするようにする。</li>
<li>startでサーバーを起動する</li>
</ol>

<p>--</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>"scripts": {
    "postinstall": "$(npm bin)/gulp build --minify=true",
    "start": "$(npm bin)/gulp webserver",
},
</pre></div></div>

<p>基本的にはdeployされるとnpminstallされそのあとにpostinstallが走り<br>
終わったらstartが実行されるという流れのようです。</p>

<h2>
<span id="gulpのserverの設定を変更する" class="fragment"></span><a href="#gulp%E3%81%AEserver%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>gulpのserverの設定を変更する</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>gulp.task('webserver', () =&gt; {
    connect.server({
        root: config.dest,
        livereload: true,
        host: process.env.HOST || 'localhost',
        port: process.env.PORT || 8000
    });
});
</pre></div></div>

<h2>
<span id="もろもろ設定が終わったら----" class="fragment"></span><a href="#%E3%82%82%E3%82%8D%E3%82%82%E3%82%8D%E8%A8%AD%E5%AE%9A%E3%81%8C%E7%B5%82%E3%82%8F%E3%81%A3%E3%81%9F%E3%82%89----"><i class="fa fa-link"></i></a>もろもろ設定が終わったら    </h2>

<p>herokuの「Manual deploy」より「Deploy Branch」 を押して現在のリポジトリをデプロイしましょう。</p>

<h2>
<span id="参考" class="fragment"></span><a href="#%E5%8F%82%E8%80%83"><i class="fa fa-link"></i></a>参考</h2>

<ul>
<li><a href="http://qiita.com/unarist/items/500ccf266655c09fd877" id="reference-a96684e5c5c9e7b86242">Heroku上でもgulp-webserverを使う</a></li>
<li><a href="http://qiita.com/yuku_t/items/8fd7551dc0418bf59aae" id="reference-ff1f0fa537be45e6e6f5">sprocketsではなくnodejsを使うRailsアプリをHerokuにデプロイする方法</a></li>
</ul>
]]></content>
        <published>2017-01-07T08:20:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[タグをランダム配置＆サイズにしてなるべく重ならないように配置するjQueryプラグイン]]></title>
        <id>3537f69f632969aef7a7</id>
        <link href="https://clover.blue/items/3537f69f632969aef7a7">
        </link>
        <updated>2016-10-05T09:18:43.000Z</updated>
        <content type="html"><![CDATA[<p>ランダム配置を作った時に上手く行くときはきれいな形になるのだけど<br>
失敗するとすごい重なっちゃってあんまり綺麗に見えないことがあります・・。</p>

<p>なので極力重ならないようにしてくれる仕組みを作ってみました。</p>

<p>site: <a href="http://develo.org/jquery.random" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/jquery.random</a><br>
GitHub: <a href="https://github.com/kamem/jquery.random" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.random</a></p>

<p>新しく作り直してnpmに登録しました。<br>
仕様も少し変わっています。<br>
GitHub: <a href="https://github.com/kamem/jquery.randomElements" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.randomElements</a></p>

<p>日本語 README<br>
<a href="https://github.com/kamem/jquery.randomElements/blob/master/README.jp.md" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.randomElements/blob/master/README.jp.md</a></p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ol>
<li>生成したい親要素をしていbodyの下に生成したい場合$('body')（※ appendされます。）</li>
<li>画像を中身に入れたい場合は画像を指定（必要がない場合は空）</li>
<li>生成したオブジェクトが重なっている場合は指定の数分ランダムをやり直す。</li>
</ol>

<p><a href="http://github.develo.org/jquery.randomElements/" rel="nofollow noopener" target="_blank">DEMO</a></p>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/jquery.random.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    $(function(){
        $('body').random('&lt;img src="img/img.png"&gt;');
    });
&lt;/script&gt;
</pre></div></div>

<h2>
<span id="オプション" class="fragment"></span><a href="#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3"><i class="fa fa-link"></i></a>オプション</h2>

<h3>
<span id="初期設定" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>tagName: 'p',
className: 'randomContent',
content: '',
num: 30,
stageWidth: $content.width(),
stageHeight: $content.height(),
width: 100,
height: 100,
min: 10,
isSize: true,
tryCount: 10,
adjustment: 0
</pre></div></div>

<ul>
<li>tagName {String} 生成したいタグの名前</li>
<li>className {String} タグに付けるクラス名（randomContent + 連番）</li>
<li>content {String} タグの中身（画像など入れ込みたい場合など）</li>
<li>num {Number} 生成したいタグの個数</li>
<li>stageWidth {Number} 領域の横幅</li>
<li>stageHeight {Number} 領域の縦幅</li>
<li>width {Number} 画像の横幅最大値 （widthとheightが同じ値の場合縦横比を保ってランダムにします。）</li>
<li>height {Number}   画像の縦幅最大値</li>
<li>min {Number} 画像の最小値</li>
<li>isSize {Boolean} サイズをランダムにするか</li>
<li>tryCount {Number} 配置が重なっていた時に再度ランダムをやり直す回数</li>
<li>adjustment {Number} 重なり具合をどのぐらい許容するか</li>
</ul>
]]></content>
        <published>2014-06-07T01:35:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[スムーズにスクロールするjQuery プラグイン]]></title>
        <id>c20247e8dc92bd295c14</id>
        <link href="https://clover.blue/items/c20247e8dc92bd295c14">
        </link>
        <updated>2016-07-31T10:36:03.000Z</updated>
        <content type="html"><![CDATA[<p>新しく今プラグインを作りなおしました。<br>
<a href="http://qiita.com/kamem/items/c94c4dc75516b36f3766" class="autolink" id="reference-f54a6b027c6ff1853090">http://qiita.com/kamem/items/c94c4dc75516b36f3766</a></p>

<ul>
<li>site: <a href="http://develo.org/jquery.smoothAnchor" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/jquery.smoothAnchor</a>
</li>
<li>Github: <a href="https://github.com/kamem/jquery.smoothAnchor" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.smoothAnchor</a>
</li>
</ul>

<p><a href="http://github.develo.org/jquery.smoothAnchor/" rel="nofollow noopener" target="_blank">DEMO</a></p>

<p>スムーズスクロールを実装したいときに、この機能はないのかなぁ・・。とか探したりするのが大変だったので、自分のなかで必要なきのうを切り替えて使えるスムーズルクロールをjQueryのanimateのscrollTop,scrollLeftをつかってjQuery Pluginを作ってみました！</p>

<p>前々からつくってはいたのですが、昔つくっていた拙いコードが残っていたので少し整理しました。</p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ol>
<li>アンカーで飛んだあとアドレスもちゃんと変更。</li>
<li>座標を指定してのページ内リンク。</li>
<li>アクセス時、座標アンカーがついている場合その位置に移動します。</li>
<li>アクセス時ページの先頭からその場所までスムーズに移動できるようにすることもできます。</li>
<li>移動後の関数実行</li>
<li>スクロール途中、マウススクロールしたときにカクカクした動きをする問題をスクロールをストップすることで回避。</li>
</ol>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/smoothAnchor.js"&gt;&lt;/script&gt;
</pre></div></div>

<h3>
<span id="初期設定" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(window).smoothAnchorInit();
$('a[href^="#"]').smoothAnchor();
</pre></div></div>

<h3>
<span id="a要素以外につけたい場合" class="fragment"></span><a href="#a%E8%A6%81%E7%B4%A0%E4%BB%A5%E5%A4%96%E3%81%AB%E3%81%A4%E3%81%91%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>a要素以外につけたい場合</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$('h1').smoothAnchor({easing : 'easeOutQuart',speed : 1000,target: '#header'});
</pre></div></div>

<h3>
<span id="flashから実行する場合" class="fragment"></span><a href="#flash%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>Flashから実行する場合</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>ExternalInterface.call("smoothAnchor",{easing : "easeOutElastic",speed : 1000,target : "#header"});
</pre></div></div>

<p>引数がない場合は初期設定になります。</p>

<h3>
<span id="移動後に関数実行" class="fragment"></span><a href="#%E7%A7%BB%E5%8B%95%E5%BE%8C%E3%81%AB%E9%96%A2%E6%95%B0%E5%AE%9F%E8%A1%8C"><i class="fa fa-link"></i></a>移動後に関数実行</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$('a[href^="#"]').smoothAnchor({
    easing: 'easeOutQuart',
    speed: 1000,
    target: '#header',
    complate:'test'
});
</pre></div></div>

<h3>
<span id="座標を指定してリンク" class="fragment"></span><a href="#%E5%BA%A7%E6%A8%99%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E3%83%AA%E3%83%B3%E3%82%AF"><i class="fa fa-link"></i></a><a>座標を指定してリンク</a>
</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>#1000,1000（x, y）
</pre></div></div>

<h2>
<span id="options" class="fragment"></span><a href="#options"><i class="fa fa-link"></i></a>Options</h2>

<h3>
<span id="初期設定-1" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A-1"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>//ロード時の処理
$(window).smoothAnchorInit({
    easing: 'easeOutQuart',
    speed: 1000,
    complate:'',
    isLoadedSmooth: true,
    isLoadedSmoothQuestionMark: true,
    isClickStop: false,
    isTopScroll: true,
    isLeftScroll: true
});

//クリック時の処理
$('a[href^="#"]').smoothAnchor({
    easing: 'easeOutQuart',
    speed: 1000,
    delay: 0,
    target: '#header',
    complate: '',
    isAddHash: true,
    isTopScroll: true,
    isLeftScroll: true
});
</pre></div></div>

<ul>
<li>easing: {String} イージングの種類,</li>
<li>speed: {Number} speed,</li>
<li>delay: {Number} delay,</li>
<li>target: {String} hrefがないタグの場合の直接指定</li>
<li>complate: {Function} スクロール後の関数名</li>
<li>isAddHash: {Boolean} スクロール後にhashを追加するか</li>
<li>isTopScroll: {Boolean} 縦方向にスクロールするか</li>
<li>isLeftScroll: {Boolean} 横方向にスクロールするか</li>
<li>isLoadedSmooth: {Boolean} ロード時にトップからスムーズスクロールするか</li>
<li>isLoadedSmoothQuestionMark: ?を使っての座標指定での移動を許可するか（?100,100）</li>
<li>isClickStop: {Boolean} スムーズスクロール時にクリックした場合に処理を停止するか</li>
</ul>
]]></content>
        <published>2014-07-12T14:38:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[パララックス効果を再現するjQueryプラグイン「jquery.parallax」]]></title>
        <id>25fbb1ca779da9155800</id>
        <link href="https://clover.blue/items/25fbb1ca779da9155800">
        </link>
        <updated>2015-12-13T07:40:29.000Z</updated>
        <content type="html"><![CDATA[<p><strong>新しく使いやすく作り直しました。</strong> <br>
<a href="http://qiita.com/kamem/items/1c49f329356e80bf3ba2" id="reference-b35d05966e8e518c18e6">スクロールによってCSSを変更し、パララックス効果を実現するjQueryプラグイン</a><br>
この記事のものとは使い方が少し異なりますが、同じ機能をもっています。</p>

<hr>

<p>site: <a href="http://develo.org/2014/04/21/0227.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/04/21/0227.html</a><br>
GitHub: <a href="https://github.com/kamem/jquery.parallax" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.parallax</a></p>

<p>仕事でパララックス効果を使ったサイト作る機会があり、<br>
使い勝手のいいプラグインないかなぁーと思って探していたのですが。<br>
なかなか見つかりませんでした・・。</p>

<p>パララックスの仕組みってそれほど難しくないんだねぇーと思いながら作り始めたのですが・・。</p>

<p>なかなかいろいろな機能を組み込みだすとなかなか大変な感じで；<br>
結構前に作った奴は自分だけ使えればいいやーと思い、プラグイン化していなかったのですが、最近ようやくプラグイン化しました。</p>

<ul>
<li><a href="http://github.develo.org/jquery.parallax/" rel="nofollow noopener" target="_blank">DEMO : 縦</a></li>
<li><a href="http://github.develo.org/jquery.parallax/sample2/" rel="nofollow noopener" target="_blank">DEMO : 横</a></li>
</ul>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<p>*3つのタイプでparallaxサイトを実装できます。</p>

<ol>
<li>startからendの位置までの距離をfromStyleからtoStyleまでのstyleでeasingの種類にそって実行する。</li>
<li>styleをスクロール量 / speedででコンテンツを動かす。</li>
<li>指定した位置を通過したときに関数を実行する。</li>
</ol>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script src="js/jquery.parallax.js"&gt;&lt;/script&gt;
</pre></div></div>

<h2>
<span id="オプション" class="fragment"></span><a href="#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3"><i class="fa fa-link"></i></a>オプション</h2>

<ul>
<li><p>parallax : {} - typeによってそれに合わせた内容を指定（ここの説明はあとで書いています。）</p></li>
<li><p>direction : y or x スクロールの方向を指定</p></li>
<li>
<p>type : 'type1' parallaxのタイプの設定</p>

<ul>
<li>type1 - startのendの位置までの距離をfromStyleからtoStyleまでのstyleでeasingにそって実行する。</li>
<li>type2 - styleをスクロール量 / speedででコンテンツを動かす。</li>
<li>type3 - 指定した位置を通過したときに関数を実行する。</li>
</ul>
</li>
<li>
<p>type2で使うoption</p>

<ul>
<li>style :  どのCSSに対して処理を行うか</li>
<li>fixPosition :  スクロール位置がどの位置にフィックスした時に画像の位置を意図した位置に持ってきたいか</li>
<li>speed  : スクロール量に合わせてどのぐらいの量で動かしたいか(Y / speed)</li>
<li>minValue : 最低の値はどのぐらいか</li>
<li>maxValue : 最高の値はどのぐらいか</li>
<li>adjustment : 背景などの位置をフィックスさせたい位置は0からどれぐらいずれているか</li>
</ul>
</li>
<li>
<p>type3で使うoption</p>

<ul>
<li>contentStartLinePercent : コンテンツが動き始めるラインを、windowの高さの割合で指定（起点は上から）真ん中の場合は50</li>
<li>startAnimation : ''  contentStartLineを上から下に向かって通過した時に実行する関数（アニメーション）</li>
<li>endAnimation : '' contentStartLineを下から上に向かって通過した時に実行する関数（アニメーション）</li>
<li>fixPosition : contentStartLineがこの位置に来た時点で関数を実行、もし指定がない場合はparallaxに指定したoffsetの情報がラインになる</li>
</ul>
</li>
</ul>

<h3>
<span id="初期設定" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>parallax : {},

direction : 'y',

// parallax Type
type : 'type1',

//type2
style : 'top',
fixPosition : 0,
speed : 1,
minValue : -999999999999,
maxValue : 999999999999,
adjustment : 0,

// type3
contentStartLinePercent : 50,
startAnimation : '',
endAnimation : ''
</pre></div></div>

<h2>
<span id="typeに合わせたparallaxの指定" class="fragment"></span><a href="#type%E3%81%AB%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9Fparallax%E3%81%AE%E6%8C%87%E5%AE%9A"><i class="fa fa-link"></i></a>typeに合わせたparallaxの指定</h2>

<h3>
<span id="type1" class="fragment"></span><a href="#type1"><i class="fa fa-link"></i></a>type1</h3>

<p>下記のような連想配列を渡す</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>例）
parallaxObj = {
    name : {
        obj : $('#header'), // 動かすオブジェクト
        tagMotions : {
            motion1 : [{
                start : 1000, // 動きのスタートのスクロール位置
                end : 1500, // 動きの終わりスクロール位置
                fromStyle : {
                    left : {Number}
                },
                toStyle : {
                    left : {Number}
                },
                easing : 'easeInOutElastic' // イージングの指定
            },
            {
                start : 1300, //動きのスタートのスクロール位置
                end : 1500, //動きの終わりスクロール位置
                fromStyle : {
                    opacity : 1
                },
                toStyle : {
                    opacity : 0.5
                },
                easing : 'liner' // イージングの指定
            }],
            motion2 : [{
                //モーションいくつでも指定可能
                //（ただしmotion1で指定している一番大きいendより、motion2のstartは大きくなるようにしてください。）
                ....
            }]
        };
    };
};


$(window).parallax({
    parallax : parallaxObj
});
</pre></div></div>

<h3>
<span id="type2" class="fragment"></span><a href="#type2"><i class="fa fa-link"></i></a>type2</h3>

<p>動かしたいコンテンツを直接指定</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>例）
$(window).parallax({
    parallax : $('#type2'),
    type : 'type2',
    style : 'background-positionTop',
    fixPosition : $('#type2').offset().top,
    speed : -2,
    maxPosition : 0,
    adjustment : -200,
    contentStartLinePercent: 50
});
</pre></div></div>

<h3>
<span id="type3" class="fragment"></span><a href="#type3"><i class="fa fa-link"></i></a>type3</h3>

<p>基準のポジション（$(hoge).offset().top）のタグ（$(hoge)）を指定<br>
もしくはstartAnimation、endAnimationの引数targetに指定したいタグ</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>例）
$(window).parallax({
    parallax : $('#type3'),
    type : 'type3',
    fixPosition : $('#type3').offset().top, //もしもfixPositionがある場合はparallaxで指定したタグのoffset().topの値よりもfixPositionが優先されます。
    startAnimation: function(e){showAnimate(e);}, //eにはparallaxで指定したタグがe.targetで取れます。
    endAnimation: function(e){hideAnimate(e);},
    contentStartLinePercent: 30
});
</pre></div></div>
]]></content>
        <published>2014-05-19T15:15:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[サイトを作り始める時の初期準備 2015]]></title>
        <id>09968c62a5113289939f</id>
        <link href="https://clover.blue/items/09968c62a5113289939f">
        </link>
        <updated>2015-10-18T14:15:10.000Z</updated>
        <content type="html"><![CDATA[<p>サイトを作り始めると時にいつも「どうしようかなぁ・・。」と迷って<br>
とりあえずその時の最善だと思うものを用意してやってはいたのですが、</p>

<p>そろそろ「ちゃんと考えなおそう！」と思いたち<br>
作りはじめる前にする準備とそれに伴うデフォルトのファイルを作ってみました。</p>

<p>GitHub: <a href="https://github.com/kamem/webSiteCreatePack" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/webSiteCreatePack</a></p>

<h2>
<span id="主な内容" class="fragment"></span><a href="#%E4%B8%BB%E3%81%AA%E5%86%85%E5%AE%B9"><i class="fa fa-link"></i></a>主な内容</h2>

<ol>
<li>sass,compassはBundlerを使ってプロジェクトごとに管理。</li>
<li>jsのパッケージ管理はnpmで主に管理して、npmで管理しきれないものに関してはbowerを使う。（好みで＾＾；）</li>
<li>jsはjsxの場合はwebpack,babelを使い。jsの場合は生のjsを使う。</li>
<li>作業フォルダと公開フォルダを分けて公開フォルダはバージョン管理しないことで二重管理をさける。</li>
</ol>

<h2>
<span id="必須" class="fragment"></span><a href="#%E5%BF%85%E9%A0%88"><i class="fa fa-link"></i></a>必須</h2>

<ol>
<li>Node (最新版推奨)</li>
<li>
<p>Gulp</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>npm install -g gulp
</pre></div></div>
</li>
<li><p>bower</p></li>
<li><p>Ruby</p></li>
<li><p>Bundler</p></li>
</ol>

<h3>
<span id="フォルダ構成" class="fragment"></span><a href="#%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E6%A7%8B%E6%88%90"><i class="fa fa-link"></i></a>フォルダ構成</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>├ root (公開用)
└ src (作業用)
    ├ css
    ├ js
    └ img
</pre></div></div>

<p>src（作業用）フォルダで作業した内容をgulpでwatchしてroot（公開用）</p>

<p>rootはバージョン管理をしないように<code>.gitignore</code>内で省いています。<br>
src側で作業しroot側で作業しないようにします。</p>

<h4>
<span id="フォルダ構成の名前を変えたい場合" class="fragment"></span><a href="#%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E6%A7%8B%E6%88%90%E3%81%AE%E5%90%8D%E5%89%8D%E3%82%92%E5%A4%89%E3%81%88%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>フォルダ構成の名前を変えたい場合</h4>

<p><code>gulpfile_settings.js</code>の内容を書き換えてください。</p>

<h2>
<span id="準備" class="fragment"></span><a href="#%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>準備</h2>

<h3>
<span id="jsの準備" class="fragment"></span><a href="#js%E3%81%AE%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>jsの準備</h3>

<p>jQueryなど必要なjsがあればpackage.jsonに記述するか。<br>
もしくはbower.jsonに記述してください。</p>

<p>個人的にはnpmで管理できる範囲であればpackage.jsonに書き、<br>
npmにないものであればbower側に記述するように使い方を分けています。<br>
フロント側で必要なファイルはbowerで一括管理も良いかなと思っています。</p>

<p>package.json</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>"dependencies": {
    "jquery": "",
    "react": "",
    "react-router": ""
}
</pre></div></div>

<p>bower.json</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>"dependencies": {
    "google-code-prettify": "",
}
</pre></div></div>

<p>それぞれプロジェクトを始める際にバージョン指定をしてください。<br>
空の状態だと最新がダウンロードされますが、<br>
時間がたち最新バージョンが変わった場合には正常に動作しなくなってしまう可能性があるためです。</p>

<h4>
<span id="バージョンをひとつひとつ設定するのがめんどくさい場合" class="fragment"></span><a href="#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E3%81%B2%E3%81%A8%E3%81%A4%E3%81%B2%E3%81%A8%E3%81%A4%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8C%E3%82%81%E3%82%93%E3%81%A9%E3%81%8F%E3%81%95%E3%81%84%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>バージョンをひとつひとつ設定するのがめんどくさい場合。</h4>

<p>下記を使ってnode_modulesをインストールするとpackage.jsonに現在の最新のバージョンが自動で指定できます。</p>

<ul>
<li><a href="http://qiita.com/okunishinishi@github/items/7629b58d1c3d464738dc" id="reference-6afb2621243048b868e0">package.jsonのdependenciesを自動更新するスクリプトを書く</a></li>
</ul>

<h3>
<span id="scssの準備" class="fragment"></span><a href="#scss%E3%81%AE%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>scssの準備</h3>

<p>自分で使っているscssファイルを<code>src/css</code>内に入れてください。<br>
自分の場合bowerでinstallしてcpで移動しています。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>bower install https://github.com/kamem/compass.default.git
cp bower_components/compass.default/sass/* src/css
</pre></div></div>

<p>postcssを使いたい場合は<code>gulpfile_settings.js</code>を修正してscssではなくcssをwatchするようにします。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>settings.watch.css.files = settings.watch.css.dir + '**/*.css';
</pre></div></div>

<h4>
<span id="gemfileを確認しておきましょうsasscompassのバージョンを指定" class="fragment"></span><a href="#gemfile%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%BE%E3%81%97%E3%82%87%E3%81%86sasscompass%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E6%8C%87%E5%AE%9A"><i class="fa fa-link"></i></a>Gemfileを確認しておきましょう。（sass,compassのバージョンを指定）</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>source "https://rubygems.org"

gem 'sass', '3.4.0.rc.3'
gem 'compass', '1.0.3'
</pre></div></div>

<h3>
<span id="ファイルを生成" class="fragment"></span><a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%94%9F%E6%88%90"><i class="fa fa-link"></i></a>ファイルを生成</h3>

<ol>
<li>
<p>package.jsonのnode_modulesをinstall</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>sudo npm install
</pre></div></div>
</li>
<li>
<p>Gemfileに従い、sass,compassをinstall</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>bundle install
</pre></div></div>
</li>
<li>
<p>bower.jsonを使ってjsをダウンロードしたい場合</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>bower install
</pre></div></div>
</li>
</ol>

<h2>
<span id="作業" class="fragment"></span><a href="#%E4%BD%9C%E6%A5%AD"><i class="fa fa-link"></i></a>作業</h2>

<h3>
<span id="開始" class="fragment"></span><a href="#%E9%96%8B%E5%A7%8B"><i class="fa fa-link"></i></a>開始</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>gulp
</pre></div></div>

<h3>
<span id="スプライトファイルの制作" class="fragment"></span><a href="#%E3%82%B9%E3%83%97%E3%83%A9%E3%82%A4%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%88%B6%E4%BD%9C"><i class="fa fa-link"></i></a>スプライトファイルの制作</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>// "src/img/sprite/**/*.png"内のファイルをスプライト化
gulp sprites
</pre></div></div>

<p><code>src/img/sprite/</code>内に<code>sprite-**.png</code>というファイルがフォルダの数分生成されます。<br>
<code>src/css</code>内に<code>src/img/sprite/</code>以下のフォルダの数分のscssの設定ファイルが生成されます。</p>

<p>ex) <code>num</code>フォルダの場合</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>sprite-num.png
_num.scss
</pre></div></div>

<h3>
<span id="svgからfontの制作" class="fragment"></span><a href="#svg%E3%81%8B%E3%82%89font%E3%81%AE%E5%88%B6%E4%BD%9C"><i class="fa fa-link"></i></a>svgからfontの制作</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>// "src/font/**/*.svg"内のファイルをfont化
gulp svgfonts
</pre></div></div>

<p><code>src/font/</code>内にfontがフォルダの数分生成されます。<br>
<code>src/css</code>内に<code>src/font/</code>以下のフォルダの数分のscssの設定ファイルが生成されます。<br>
fontの内容を確認したい場合は<code>src/css/font/sns_fontlist.html</code>を見るとfont一覧を確認できます。</p>

<h4>
<span id="fontの使い方" class="fragment"></span><a href="#font%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>fontの使い方</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@import "font/_name";

.test {
    font-family: $name-test; //変数で文字コードを取ってくることができます。
    //(フォルダ名 - ファイル名)
}
</pre></div></div>

<p>吐き出すscssの内容を変えたい場合はsrc/css/font/templates/css.scssを編集してください。</p>

<h3>
<span id="実作業" class="fragment"></span><a href="#%E5%AE%9F%E4%BD%9C%E6%A5%AD"><i class="fa fa-link"></i></a>実作業</h3>

<h4>
<span id="html" class="fragment"></span><a href="#html"><i class="fa fa-link"></i></a>html</h4>

<p><a href="https://www.npmjs.com/package/gulp-usemin" rel="nofollow noopener" target="_blank">usemin</a>を使っています。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;!-- build:js js/common.js --&gt;
&lt;script src="../node_modules/jquery/dist/jquery.js"&gt;&lt;/script&gt;
&lt;script src="../bower_components/google-code-prettify/src/prettify.js"&gt;&lt;/script&gt;
&lt;!-- endbuild --&gt;
</pre></div></div>

<p><code>root/js/common.js</code>として<code>jquery.js</code> <code>prettify.js</code>をまとめたファイルが生成されます。<br>
htmlは<code>root/</code>に下記ように変換され出力されます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script src="js/common.js"&gt;&lt;/script&gt;
</pre></div></div>

<h4>
<span id="js" class="fragment"></span><a href="#js"><i class="fa fa-link"></i></a>js</h4>

<p><code>jsx</code>と拡張子をつけることによって、webpackとbabelを使えるようにしています。<br>
webpackとbabelを使わない場合は拡張子を<code>js</code>にしてください。</p>

<h3>
<span id="確認方法" class="fragment"></span><a href="#%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>確認方法</h3>

<p>localhost:8888 で確認できます。</p>

<h2>
<span id="公開" class="fragment"></span><a href="#%E5%85%AC%E9%96%8B"><i class="fa fa-link"></i></a>公開</h2>

<ul>
<li>
<p>CSS,JSの圧縮</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>gulp build --minify true
</pre></div></div>
</li>
</ul>

<p>公開前に上記を実行することでroot内に圧縮されたファイルが出来上がります。</p>

<p>こんな感じで今後サイトを作り始める際はやっていこうかと思いました！<br>
最近いろいろと移り変わりが激しいのでまた設定など変わっていくかと思いますがその都度更新などしていこうかと思います。</p>

<p>最近ではpostcssなど流行っているので試してみようかと思ったのですが<br>
いま現状postcssを使おうと思うとエディタ側が対応しきれていない状況なのでちょっと使いづらいかなぁと思いました。<br>
シンプルだし早いッて噂なので試してみたいなぁとは思っているのですが今後に期待です！</p>
]]></content>
        <published>2015-10-12T06:29:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[data-ga属性をつけるとGoogle Analyticsのクリックイベントを取得してくれるJavascript]]></title>
        <id>7e426fcb88857c12f9df</id>
        <link href="https://clover.blue/items/7e426fcb88857c12f9df">
        </link>
        <updated>2015-04-28T16:06:13.000Z</updated>
        <content type="html"><![CDATA[<p>クリックイベントをつけようと思った時に、どうやってつけようかなぁ。とかいつも迷っていたので汎用的に使えるものを作ってみました。</p>

<p>プラグイン化するほどでもないかなぁってことで、ソースのみ書いちゃってます。</p>

<p>こういうのってプラグイン化しちゃったほうがいいのかな。<br>
ちょっと時間あるとき整理してプラグイン化してgithub公開しようかと思います。<br>
とりあえずgaのクリックイベント周り設定しやすくしてくれるjsです。</p>

<p>手順・仕様は下記のとおりです。</p>

<ol>
<li>取得したいタグにdata-gaをつける。</li>
</ol>

<h2>
<span id="aタグにつけた場合単一-" class="fragment"></span><a href="#a%E3%82%BF%E3%82%B0%E3%81%AB%E3%81%A4%E3%81%91%E3%81%9F%E5%A0%B4%E5%90%88%E5%8D%98%E4%B8%80-"><i class="fa fa-link"></i></a>aタグにつけた場合（単一） </h2>

<ol>
<li>
<strong>data-ga="値"が入っている場合</strong>は値を取得</li>
<li>
<strong>値がなく</strong>、そのなかの画像にalt属性がついていた場合にはaltの値を取得</li>
<li>上記どちらにも当てはまらない場合は、タグ内のテキストを取得</li>
</ol>

<h2>
<span id="aタグ以外についていた場合複数-" class="fragment"></span><a href="#a%E3%82%BF%E3%82%B0%E4%BB%A5%E5%A4%96%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%84%E3%81%9F%E5%A0%B4%E5%90%88%E8%A4%87%E6%95%B0-"><i class="fa fa-link"></i></a>aタグ以外についていた場合（複数） </h2>

<ol>
<li>タグ内のaタグに反応</li>
<li>
<p><strong>data-ga="値"が入っている場合</strong>は値を取得の形で取得 </p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>'data-ga="値"' + (img alr || タグ内text)
</pre></div></div>
</li>
<li><p><strong>値がなく</strong>、aタグ内の画像にalt属性がついていた場合にはaltの値を取得</p></li>
<li><p>上記どちらにも当てはまらない場合は、タグ内のテキストを取得</p></li>
</ol>

<p>最後に<code>Category</code>にページのタイトルを入れ<br>
取得したテキスト値を<code>Label</code>に入れ<code>send event</code>で送信</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>ga('send', 'event', 'ページのタイトル', 'click', '値');
</pre></div></div>

<h2>
<span id="実際のソース" class="fragment"></span><a href="#%E5%AE%9F%E9%9A%9B%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9"><i class="fa fa-link"></i></a>実際のソース</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>var gaClickEvent = (function() {
    var title = $('title').text();
    $('[data-ga] a, a[data-ga]').on('click',
            function(e) {
                var currentTarget = e.currentTarget;
                var $this = $(currentTarget);
                var alt = $this.find('&gt; img').prop('alt');
                var gaq = $this.data('ga');

                if(gaq === undefined) {
                    var parentGaq = $this.parents('[data-ga]').data('ga');
                    var mainText = alt ? alt : $this.text();

                    var text = parentGaq ? parentGaq + ' ' + mainText : mainText;
                } else {
                    var text = gaq ? gaq :
                            alt ? alt : $this.text();
                }

                if(typeof ga !== 'undefined') {
                    ga('send', 'event', title, 'click', text);
                }
            }
    );
})();
</pre></div></div>
]]></content>
        <published>2015-04-28T16:06:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[sassでz-indexをまとめて管理しておく＆配列順に番号をつけてくれる関数]]></title>
        <id>323d2b35216b748e590c</id>
        <link href="https://clover.blue/items/323d2b35216b748e590c">
        </link>
        <updated>2015-04-26T10:08:18.000Z</updated>
        <content type="html"><![CDATA[<p><code>z-index</code>を使っていると、この要素ってどのぐらいの値なんだっけ・・。と迷うことがあったり<br>
とりあえず<code>99999</code>とか大きい数字つけとくかなーみたいな考えになったりしちゃう時がありますね＾＾；</p>

<p>そんなことにならないように1つのところでz-indexを管理して、見やすくなるような関数を作ってみました。</p>

<p><a href="http://codepen.io/kame/pen/ogRWbm" class="autolink" rel="nofollow noopener" target="_blank">http://codepen.io/kame/pen/ogRWbm</a></p>

<h2>
<span id="sass" class="fragment"></span><a href="#sass"><i class="fa fa-link"></i></a>sass</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$z-index: (
    test2
    test1
    test3
);

@function z-index($name, $list: $z-index) {
    @return abs(index($list, $name) - length($list) - 1);
}


@each $name in $z-index {
    #{'.' + $name} {
        z-index: z-index($name);
    }
};
</pre></div></div>

<h2>
<span id="出力css" class="fragment"></span><a href="#%E5%87%BA%E5%8A%9Bcss"><i class="fa fa-link"></i></a>出力css</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>.test1 {
    z-index: 2; 
}
.test2 {
    z-index: 3; 
}
.test3 {
    z-index: 1; 
}
</pre></div></div>

<p><code>$z-index</code>に追加したり配列の順番をかえたりすると、<br>
配列通りに上から並んでくれるので、分かりやすいかなぁと思います。</p>
]]></content>
        <published>2015-04-07T02:22:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[テキストエディタでの便利な正規表現での置換]]></title>
        <id>d1c2ae88568ee971686f</id>
        <link href="https://clover.blue/items/d1c2ae88568ee971686f">
        </link>
        <updated>2015-03-29T06:59:49.000Z</updated>
        <content type="html"><![CDATA[<p>何かで挟まれた値の中身だけは残して周りの記述を置換したい・・。<br>
だけど値が違ったりしてうまくいっぱつで置換できない・・。</p>

<p>みたいな時ってありますよね。</p>

<p>Codaとかだと標準で簡単に置換できるようにその機能がついていたりするのですが、<br>
intelliJとかSublimeTextだとどうやって書くんだろうと思いしらべてみました。</p>

<p>下記の正規表現を使えばうまく置換できるようです。</p>

<p>それぞれのエディタの置換タブを出すショートカット</p>

<ul>
<li>intelliJ: Command + R</li>
<li>SublimeText: Command + Option + F(検索タブの一番左の「.*」にチェック)</li>
</ul>

<h2>
<span id="scssの例" class="fragment"></span><a href="#scss%E3%81%AE%E4%BE%8B"><i class="fa fa-link"></i></a>SCSSの例</h2>

<p>「<a href="/include" class="user-mention js-hovercard" title="include" data-hovercard-target-type="user" data-hovercard-target-name="include">@include</a> プロパティ(値);」を「プロパティ:値;」に置換するための正規表現</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>//置換したい文字列
@include (.*)\((.*)\);

//置換後の文字列
$1\: $2\;
</pre></div></div>

<h3>
<span id="二重括弧対策" class="fragment"></span><a href="#%E4%BA%8C%E9%87%8D%E6%8B%AC%E5%BC%A7%E5%AF%BE%E7%AD%96"><i class="fa fa-link"></i></a>二重括弧対策</h3>

<p>2重で括弧がある場合の対策。ちゃんと使われるであろう文字列を指定します。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>//置換したい文字列
@include ([\w-]+)\(([\s\w\(\)\,\./%!\$\'\"#\-\+]+)\);
</pre></div></div>

<p>このように置換したい部分を<code>(.*)</code>で囲み、置換後の正規表現で<code>$1</code>とすることでいけるようです。<br>
<code>$1</code>,<code>$2</code>と付いているのは<code>(.*)</code>で囲った部分の1つ目と2つ目という意味です。</p>

<p>わりと作業しているとこの辺りはちょいちょい出てくるので覚えておくと便利ですね。</p>

<h2>
<span id="特定の文字列を除きたい場合" class="fragment"></span><a href="#%E7%89%B9%E5%AE%9A%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%82%92%E9%99%A4%E3%81%8D%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>特定の文字列を除きたい場合</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>//置換したい文字列
@include ((?!notStr).*)\((.*)\);

//複数指定
@include ((?!notStr|notStr2).*)\((.*)\);
</pre></div></div>

<p><code>(?!notStr)</code>のように<code>notStr</code>部分に除きたい文字列を書きます。<br>
複数指定したい場合には<code>|</code>で区切ります。</p>
]]></content>
        <published>2015-03-19T02:14:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sass、Compassのバージョンアップに伴い（sass 3.4, compass 1.0）]]></title>
        <id>ecb07905e0b99950f19a</id>
        <link href="https://clover.blue/items/ecb07905e0b99950f19a">
        </link>
        <updated>2015-03-05T06:48:04.000Z</updated>
        <content type="html"><![CDATA[<p>Sassのmixinなど色々作っていたのですが。<br>
しばらくバージョンアップなどしていなかったうちに<br>
色々と仕様が変わっていたので、<br>
自作mixinの作り直し + 仕様が変わった点などをまとめたいと思います。</p>

<p>※ 自作mixinも最新のsass,compassに合わせて修正済みです。（2014-12-17 現在）</p>

<ul>
<li><a href="http://qiita.com/kamem/items/07d7500a046dfc96e742" id="reference-82752bd12895c46a16e3">Sass,Compassのデフォルトmixinとカスタム関数</a></li>
</ul>

<h2>
<span id="sass---グローバル変数が変更できない" class="fragment"></span><a href="#sass---%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%A4%89%E6%95%B0%E3%81%8C%E5%A4%89%E6%9B%B4%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84"><i class="fa fa-link"></i></a>Sass - グローバル変数が変更できない</h2>

<p>ローカルからグローバルの変数が通常の書き方では変更できなくなりました。<br>
変更する際には、!globalを使います。</p>

<h3>
<span id="32" class="fragment"></span><a href="#32"><i class="fa fa-link"></i></a>3.2</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$color: white;

.test{
    $color: black;

    color: $color;
}
</pre></div></div>

<h3>
<span id="34" class="fragment"></span><a href="#34"><i class="fa fa-link"></i></a>3.4</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$color: white;

.test{
    $color: black !global;

    color: $color;
}
</pre></div></div>

<ul>
<li>[参考] <a href="http://hail2u.net/blog/coding/sass-variable-scope-and-bang-global.html" rel="nofollow noopener" target="_blank">Sassの変数スコープと!global</a>
</li>
</ul>

<h2>
<span id="compass---border-radiusの仕様変更" class="fragment"></span><a href="#compass---border-radius%E3%81%AE%E4%BB%95%E6%A7%98%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>Compass - border-radiusの仕様変更</h2>

<p>角丸の一括指定ができなくなったようです。</p>

<p><a href="http://compass-style.org/examples/compass/css3/border_radius/" class="autolink" rel="nofollow noopener" target="_blank">http://compass-style.org/examples/compass/css3/border_radius/</a></p>

<h3>
<span id="32-1" class="fragment"></span><a href="#32-1"><i class="fa fa-link"></i></a>3.2</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include border-radius(0 2px 0 0);
</pre></div></div>

<h3>
<span id="33" class="fragment"></span><a href="#33"><i class="fa fa-link"></i></a>3.3</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include border-top-right-radius(2px);
</pre></div></div>

<h2>
<span id="compass---ブラウザサポートの変数記述の仕様変更" class="fragment"></span><a href="#compass---%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%AE%E5%A4%89%E6%95%B0%E8%A8%98%E8%BF%B0%E3%81%AE%E4%BB%95%E6%A7%98%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>Compass - ブラウザサポートの変数記述の仕様変更</h2>

<p>下記のような古いブラウザの対応を指定しておく変数が軒並み変わっています。</p>

<h3>
<span id="0系" class="fragment"></span><a href="#0%E7%B3%BB"><i class="fa fa-link"></i></a>0系</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$legacy-support-for-ie6
$experimental-support-for-webkit
</pre></div></div>

<h3>
<span id="1系" class="fragment"></span><a href="#1%E7%B3%BB"><i class="fa fa-link"></i></a>1系</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$supported-browsers: ("chrome", "firefox", "ie", "safari", "opera", "ios-safari", "android");
$browser-minimum-versions: ("opera": "11", "ie": "6");
</pre></div></div>

<ul>
<li>
<code>$supported-browsers</code>には配列で対応するブラウザを指定します。</li>
<li>
<code>$browser-minimum-versions</code>にはブラウザが対応するバージョンを指定します。</li>
</ul>

<h3>
<span id="バージョンの確認" class="fragment"></span><a href="#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E7%A2%BA%E8%AA%8D"><i class="fa fa-link"></i></a>バージョンの確認</h3>

<p>compassで対応しているブラウザとバージョンは、下記を実行することで確認できます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@debug browsers();
@debug browser-versions(ios-safari);
</pre></div></div>

<ul>
<li>
<code>browser-versions</code>にはバージョンを確認したいブラウザ名（<code>browsers</code>で確認した文字列）を指定します。</li>
</ul>

<h3>
<span id="バージョンごとの条件分岐方法" class="fragment"></span><a href="#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%94%E3%81%A8%E3%81%AE%E6%9D%A1%E4%BB%B6%E5%88%86%E5%B2%90%E6%96%B9%E6%B3%95"><i class="fa fa-link"></i></a>バージョンごとの条件分岐方法</h3>

<p>例: IE7以下のみの場合 ↓</p>

<h4>
<span id="0系-1" class="fragment"></span><a href="#0%E7%B3%BB-1"><i class="fa fa-link"></i></a>0系</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
}
</pre></div></div>

<h4>
<span id="1系-1" class="fragment"></span><a href="#1%E7%B3%BB-1"><i class="fa fa-link"></i></a>1系</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@if support-legacy-browser("ie", "7") {
}
</pre></div></div>

<h3>
<span id="webkitの古いバージョンでのlinear-gradient先行実装の記述" class="fragment"></span><a href="#webkit%E3%81%AE%E5%8F%A4%E3%81%84%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%A7%E3%81%AElinear-gradient%E5%85%88%E8%A1%8C%E5%AE%9F%E8%A3%85%E3%81%AE%E8%A8%98%E8%BF%B0"><i class="fa fa-link"></i></a>webkitの古いバージョンでのlinear-gradient先行実装の記述</h3>

<p>iPhoneの古いバージョンなどで<code>-webkit-gradient()</code>の記述を出力するには、<br>
<code>$supported-browsers</code>にandroidを追加すると出力されます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$supported-browsers: ("android");
</pre></div></div>

<h2>
<span id="compass---sprite-pathの仕様変更" class="fragment"></span><a href="#compass---sprite-path%E3%81%AE%E4%BB%95%E6%A7%98%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>Compass - sprite-pathの仕様変更（？）</h2>

<p>調べ切れていないのですが、システムからの絶対パスでファイルが指定されるようになっていました。</p>

<p>下記のように<code>image-url</code>を使っていたのですが、<br>
パスが変わったしまったため、おかしくなっていたのでsprite-urlに変更しました。</p>

<h3>
<span id="0系-2" class="fragment"></span><a href="#0%E7%B3%BB-2"><i class="fa fa-link"></i></a>0系</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>image-url(sprite-path($map))
</pre></div></div>

<h3>
<span id="1系-2" class="fragment"></span><a href="#1%E7%B3%BB-2"><i class="fa fa-link"></i></a>1系</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>sprite-url($map)
</pre></div></div>

<h2>
<span id="sass34-変更点追加点" class="fragment"></span><a href="#sass34-%E5%A4%89%E6%9B%B4%E7%82%B9%E8%BF%BD%E5%8A%A0%E7%82%B9"><i class="fa fa-link"></i></a>Sass3.4 変更点・追加点</h2>

<h3>
<span id="について" class="fragment"></span><a href="#%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"><i class="fa fa-link"></i></a>&amp;について</h3>

<p>BEMを採用して作るときには&amp;の書き方などを工夫することで便利に作れるようになっているようです。<br>
* [参考] <a href="http://blog.ruedap.com/2013/10/29/block-element-modifier" rel="nofollow noopener" target="_blank">BEMという命名規則とSass 3.3の新しい記法</a><br>
* [参考] <a href="http://geckotang.tumblr.com/post/79158530266/sass3-3-0" rel="nofollow noopener" target="_blank">Sass3.3.0の「&amp;」の扱い</a></p>

<h3>
<span id="追加された関数" class="fragment"></span><a href="#%E8%BF%BD%E5%8A%A0%E3%81%95%E3%82%8C%E3%81%9F%E9%96%A2%E6%95%B0"><i class="fa fa-link"></i></a>追加された関数</h3>

<ul>
<li>[参考] <a href="http://geckotang.tumblr.com/post/79158530266/sass3-3-0" rel="nofollow noopener" target="_blank">Sass3.4 変更点・追加点を眺めた</a>

<ul>
<li>追加されたselector function

<ul>
<li><a href="http://qiita.com/kazu69/items/45b707d5e05c6b6bd259#selector-nestselectors" id="reference-67ea326fa50252f32464">selector-nest</a></li>
<li><a href="http://qiita.com/kazu69/items/45b707d5e05c6b6bd259#selector-appendselectors" id="reference-67ea326fa50252f32464">selector-append</a></li>
<li><a href="http://qiita.com/kazu69/items/45b707d5e05c6b6bd259#selector-extendselectors-extendee-extender" id="reference-67ea326fa50252f32464">selector-extend</a></li>
<li><a href="http://qiita.com/kazu69/items/45b707d5e05c6b6bd259#selector-replaceselector-original-replacement" id="reference-67ea326fa50252f32464">selector-replace</a></li>
<li><a href="http://qiita.com/kazu69/items/45b707d5e05c6b6bd259#selector-unifyselector1-selector2" id="reference-67ea326fa50252f32464">selector-unify</a></li>
<li><a href="http://qiita.com/kazu69/items/45b707d5e05c6b6bd259#is-superselectorsuper-sub" id="reference-67ea326fa50252f32464">is-superselector</a></li>
<li><a href="http://qiita.com/kazu69/items/45b707d5e05c6b6bd259#selector-parse" id="reference-67ea326fa50252f32464">selector-parse</a></li>
</ul>
</li>
</ul>
</li>
</ul>

<p>また、気になった点があれば追記していきます。</p>
]]></content>
        <published>2014-12-17T10:55:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[border-imageをbefore,after擬似要素で使うとRetina対応もできて便利]]></title>
        <id>f4da3a0910454556b347</id>
        <link href="https://clover.blue/items/f4da3a0910454556b347">
        </link>
        <updated>2014-09-26T05:33:57.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/border-image-after" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/border-image-after</a></p>

<p>ボックスの周りに装飾として画像を置きたい場合に背景画像で対応するのもいいのですが<br>
3つに切って・・。真ん中を繰り返しして・・。<br>
さらに透過だった場合どこのタグに背景をいれるか工夫したりするのが大変だなぁと思っていました。</p>

<p>そういう場合はborder-imageを使ったりしていたのですが<br>
border-imageを使うとborder-width分コンテンツが内側によっちゃいますよね・・。<br>
まぁborderなので当たり前ですが・・。<br>
しかも普通にやると画像だけ1/2にすることができないので、Retina対応とかできないんです。</p>

<p>でもこれafterとかbeforeに指定したらborder-widthとか気にせずに使えるんじゃない！？<br>
と思って試してみたらめちゃめちゃ便利！しかもRetina対応もできちゃうし！</p>

<p>みなさんも是非使ってみてください。</p>

<p><a href="http://jsrun.it/kamem/ozK6" rel="nofollow noopener" target="_blank">DEMO</a></p>

<p>イメージとしてはafterかbeforeをつかってborder-imageを<em>absolute</em>の<em>width,heightともに100%</em>にしてコンテンツの上にかぶしちゃおうという感じです！<br><br>
ただしかぶしちゃうと中のリンクがきかなくなっちゃうので、中身のほうが<em>z-index</em>が高くなるように設定してあげればよいかと思います。</p>

<p>さらにさらに、<em>zoomを0.5</em>にすることによってRetinaにも対応出来ちゃいます！<br><br>
いいコトづくしじゃん！</p>

<h2>
<span id="html" class="fragment"></span><a href="#html"><i class="fa fa-link"></i></a>HTML</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;div&gt;
    &lt;h2&gt;normal&lt;/h2&gt;
    &lt;p&gt;...&lt;/p&gt;
&lt;/div&gt;</pre></div></div>

<h2>
<span id="css" class="fragment"></span><a href="#css"><i class="fa fa-link"></i></a>CSS</h2>

<h3>
<span id="通常" class="fragment"></span><a href="#%E9%80%9A%E5%B8%B8"><i class="fa fa-link"></i></a>通常</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>.normal {
    border-width: 100px;
    -moz-border-image: url(http://jsrun.it/assets/n/T/2/b/nT2bz.png) 100 repeat;
    -webkit-border-image: url(http://jsrun.it/assets/n/T/2/b/nT2bz.png) 100 repeat;
    -o-border-image: url(http://jsrun.it/assets/n/T/2/b/nT2bz.png) 100 repeat;
    border-image: url(http://jsrun.it/assets/n/T/2/b/nT2bz.png) 100 fill repeat;
    box-sizing: border-box;
}</pre></div></div>

<h3>
<span id="afterを使った場合" class="fragment"></span><a href="#after%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>afterを使った場合</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>.after {
    position: relative;
}

.after:after {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    border-width: 100px;
    -moz-border-image: url(http://jsrun.it/assets/n/T/2/b/nT2bz.png) 100 repeat;
    -webkit-border-image: url(http://jsrun.it/assets/n/T/2/b/nT2bz.png) 100 repeat;
    -o-border-image: url(http://jsrun.it/assets/n/T/2/b/nT2bz.png) 100 repeat;
    border-image: url(http://jsrun.it/assets/n/T/2/b/nT2bz.png) 100 fill repeat;
    box-sizing: border-box;
    zoom: 0.5; /* Retina対応 */
}

.after &gt; * {
    position: relative;
    z-index: 1;
}</pre></div></div>

<p>border-imageってなんかいまいち使いづらいなぁと思っていたので、これを思いついてからすごい使いやすくなった気がします！<br><br>
border-imageを使って作業を楽にしちゃいましょー。</p>

<p>ちなみにジェネレーターは<a href="http://border-image.com/" rel="nofollow noopener" target="_blank">border-image-generator</a>を使うと簡単に設定できちゃいます。</p>
]]></content>
        <published>2014-09-26T04:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[領域からはみ出てる文字列をCSSだけで「・・・」にする]]></title>
        <id>7ab3cddafbe175375b24</id>
        <link href="https://clover.blue/items/7ab3cddafbe175375b24">
        </link>
        <updated>2014-09-25T09:32:07.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/text-overflow-ellipsis" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/text-overflow-ellipsis</a></p>

<p>サイトを作っていると、デザイン的に一行におさめたい・・。という時があります。</p>

<p>そういう時はJavascriptで文字制限したり。予めサーバー側で文字制限した文字列を渡してもらうなどして対処していたのですが</p>

<p>CSSでできないのかなぁ・・。といろいろ試したところ少しつかいどころに制限はありますができるようです！</p>

<p><a href="http://jsrun.it/kamem/oga4" rel="nofollow noopener" target="_blank">DEMO</a></p>

<h2>
<span id="1行の場合" class="fragment"></span><a href="#1%E8%A1%8C%E3%81%AE%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>1行の場合</h2>

<h3>
<span id="html" class="fragment"></span><a href="#html"><i class="fa fa-link"></i></a>HTML</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p&gt;テストテストテストテストテストテストテストテストテスト&lt;/p&gt;</pre></div></div>

<h3>
<span id="css" class="fragment"></span><a href="#css"><i class="fa fa-link"></i></a>CSS</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>p {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}</pre></div></div>

<h2>
<span id="floatしている場合" class="fragment"></span><a href="#float%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88"><i class="fa fa-link"></i></a>floatしている場合</h2>

<h3>
<span id="html-1" class="fragment"></span><a href="#html-1"><i class="fa fa-link"></i></a>HTML</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;ul&gt;
    &lt;li&gt;カテゴリー : HTML,CSS,Javascript&lt;/li&gt;
    &lt;li&gt;タグ : jQuery&lt;/li&gt;
    &lt;li&gt; テストテストテストテストテストテストテストテストテスト&lt;/li&gt; 
&lt;/ul&gt;</pre></div></div>

<h3>
<span id="css-1" class="fragment"></span><a href="#css-1"><i class="fa fa-link"></i></a>CSS</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>li {
    float: left;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

li:last-child {
    float: none;
}
</pre></div></div>

<p>ポイントは「last-child」で最後のタグはfloatしないことです。<br>
最後をfloatしないことにより、タグが親タグの幅いっぱいに広がり親タグの範囲での文字制限をすることができます。</p>

<p>最後のタグをfloatしている場合は、タグが次の行に落ちてしまいます。</p>

<p>または幅を指定しての文字制限も可能です。<br>
文字数で制限したい場合には「em」を使うとよいです。</p>

<h3>
<span id="5文字制限したい場合のcss" class="fragment"></span><a href="#5%E6%96%87%E5%AD%97%E5%88%B6%E9%99%90%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AEcss"><i class="fa fa-link"></i></a>5文字制限したい場合のCSS</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>li:last-child {
    float: none;
    width: 5em
}</pre></div></div>
]]></content>
        <published>2014-09-25T09:27:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[楽しくコーディング！Sass,Compassのデフォルトmixinとカスタム関数]]></title>
        <id>07d7500a046dfc96e742</id>
        <link href="https://clover.blue/items/07d7500a046dfc96e742">
        </link>
        <updated>2014-08-27T02:36:27.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/2014/05/19/0935.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/05/19/0935.html</a><br>
GitHub: <a href="https://github.com/kamem/compass.default" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/compass.default</a></p>

<h2>
<span id="sasscompass関連のフォルダ構成" class="fragment"></span><a href="#sasscompass%E9%96%A2%E9%80%A3%E3%81%AE%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E6%A7%8B%E6%88%90"><i class="fa fa-link"></i></a>Sass,Compass関連のフォルダ構成</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>├config.rb
├ rb
|   ├ develo.rb
|   ├ skyward_design.rb
|   └
└ sass
    ├ _animation.scss
    ├ _keyframes.sass
    ├ _extension_decimal.scss
    ├ _extension_import.scss
    ├ _extension_sprite.scss
    ├ _extension.scss
    ├ _setting_site.scss
    ├ _setting.scss
    ├ common.scss
    ├ default.scss
    ├ import.scss
    ├ sprite.scss
    ├ templates.scss
    └ test.scss
</pre></div></div>

<h2>
<span id="カスタム関数rb" class="fragment"></span><a href="#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E9%96%A2%E6%95%B0rb"><i class="fa fa-link"></i></a>カスタム関数（rb）</h2>

<h3>
<span id="develorb-github" class="fragment"></span><a href="#develorb-github"><i class="fa fa-link"></i></a>develo.rb （<a href="https://github.com/kamem/compass.develo" rel="nofollow noopener" target="_blank">GitHub</a>）</h3>

<ul>
<li><a href="http://develo.org/2014/05/08/1000.html" rel="nofollow noopener" target="_blank">Sass,Compassでファイルの有無を返してくれるカスタム関数</a></li>
<li><a href="http://develo.org/2014/05/08/0900.html" rel="nofollow noopener" target="_blank">Sass,Compassでフォルダ内のファイルリストを取得するカスタム関数</a></li>
</ul>

<h3>
<span id="skyward_designrbgithub" class="fragment"></span><a href="#skyward_designrbgithub"><i class="fa fa-link"></i></a>skyward_design.rb（<a href="https://github.com/hideki-a/SassFunctions" rel="nofollow noopener" target="_blank">GitHub</a>）</h3>

<ul>
<li><a href="http://www.anothersky.pw/skyward/archives/000127.html" rel="nofollow noopener" target="_blank">Ruby初心者だけどゼロパディングするカスタムSassファンクションを作ってみた</a></li>
<li><a href="http://www.anothersky.pw/skyward/archives/000128.html" rel="nofollow noopener" target="_blank">文字列を置換するカスタムSass関数を作ってみた</a></li>
</ul>

<h2>
<span id="全てのscssに共通で読み込む必要なmixinなどのimport_extension_importscss" class="fragment"></span><a href="#%E5%85%A8%E3%81%A6%E3%81%AEscss%E3%81%AB%E5%85%B1%E9%80%9A%E3%81%A7%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80%E5%BF%85%E8%A6%81%E3%81%AAmixin%E3%81%AA%E3%81%A9%E3%81%AEimport_extension_importscss"><i class="fa fa-link"></i></a>全てのscssに共通で読み込む必要なmixinなどのimport（_extension_import.scss）</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@import "compass/css3/",
"setting",
"setting_site",
"compass/support",
"animation",
"_keyframes",
"extension_decimal",
"extension";
</pre></div></div>

<h2>
<span id="設定用scsssettingscss_settingsitescss" class="fragment"></span><a href="#%E8%A8%AD%E5%AE%9A%E7%94%A8scsssettingscss_settingsitescss"><i class="fa fa-link"></i></a>設定用scss（<em>setting.scss,_setting</em>site.scss）</h2>

<h3>
<span id="_settingscss" class="fragment"></span><a href="#_settingscss"><i class="fa fa-link"></i></a>_setting.scss</h3>

<p>compassで使用する変数の設定</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>//config.rb指定したimages_dirの値
$images_dir: "html/img/";

//HTML5の場合は「true」
$html5: true;
//Retina対応
$isRetina: false;
//base64対応
$isBase64: false;

//compass ブラウザサポート
$legacy-support-for-ie6: true;
$legacy-support-for-ie7: true;

$experimental-support-for-webkit: true;
$experimental-support-for-mozilla: true;
$experimental-support-for-opera: true;
$experimental-support-for-microsoft: true;
$experimental-support-for-khtml: false;

//ie9用 svg
$experimental-support-for-svg: true;
</pre></div></div>

<h3>
<span id="_setting_sitescss" class="fragment"></span><a href="#_setting_sitescss"><i class="fa fa-link"></i></a>_setting_site.scss</h3>

<p>サイトを作る際に全体で使う変数の設定。</p>

<p>例</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>//font
$font-sizeDefault: 10; // 基準となるフォントサイズ（htmlに指定する値）
$font-size: 16; // よく使うfont-size
$font-unit: rem; // 使う単位
$font-family: "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", Osaka, "ＭＳ Ｐゴシック", "MS PGothic", Sans-Serif;

//ページの横幅
$base-width: 736;
$base-width-big: 798;

// 標準テキストカラー
$textColor : #500;

// 標準リンクカラー
$linkColor : #39c;
$linkColor_hover : #f39;
$linkColor_visited : rgba(#39c,0.7);
$linkColor_active : #39c;

//mediaQueryの基準となる幅
$mediaQuery-large: 798;
$mediaQuery-middle: 480;
$mediaQuery-small: 320;
</pre></div></div>

<h2>
<span id="animation関係を使えるように_animationscss" class="fragment"></span><a href="#animation%E9%96%A2%E4%BF%82%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB_animationscss"><i class="fa fa-link"></i></a>animation関係を使えるように（_animation.scss）</h2>

<p>下記のanimation関係のCSSを<a href="/include" class="user-mention js-hovercard" title="include" data-hovercard-target-type="user" data-hovercard-target-name="include">@include</a>で使えるようにしベンダープレフィックスを付けるようにしてくれる。</p>

<ul>
<li>animation-name</li>
<li>animation-duration</li>
<li>animation-timing-function</li>
<li>animation-delay</li>
<li>animation-iteration-count</li>
<li>animation-direction</li>
</ul>

<h2>
<span id="keyframesを使えるように_keyframesscss" class="fragment"></span><a href="#keyframes%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB_keyframesscss"><i class="fa fa-link"></i></a>keyframesを使えるように（_keyframes.scss）</h2>

<p>keyframesを<a href="/include" class="user-mention js-hovercard" title="include" data-hovercard-target-type="user" data-hovercard-target-name="include">@include</a>で使えるようにしベンダープレフィックスを付けるようにしてくれる。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include keyframes(anime1) {
  0% {
    @include transform(rotate(720deg));
  }
  100% {
    width: 500px;
    @include transform(rotate(0deg));
  }
}
</pre></div></div>

<h2>
<span id="小数の桁数と丸め方を制御する_extension_decimalscss" class="fragment"></span><a href="#%E5%B0%8F%E6%95%B0%E3%81%AE%E6%A1%81%E6%95%B0%E3%81%A8%E4%B8%B8%E3%82%81%E6%96%B9%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B_extension_decimalscss"><i class="fa fa-link"></i></a>小数の桁数と丸め方を制御する（_extension_decimal.scss）</h2>

<p>下記サイトのscssを使わせて頂いています。</p>

<ul>
<li><a href="http://terkel.jp/archives/2012/12/decimal-digits-and-rounding-sass-function/" rel="nofollow noopener" target="_blank">小数の桁数と丸め方を制御する Sass 関数</a></li>
</ul>

<h2>
<span id="sprite画像を生成する_extension_spritescss" class="fragment"></span><a href="#sprite%E7%94%BB%E5%83%8F%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B_extension_spritescss"><i class="fa fa-link"></i></a>sprite画像を生成する（_extension_sprite.scss）</h2>

<p>スプライト画像を生成し、その画像名のクラスを付けるだけで画像を表示できるようにしてくれる。<br>
これを使うことによりscss編集時に毎回スプライトチェックする問題を回避することができます。<br>
sprite.scssだけ使うことができます。</p>

<p>ほかのscssでspriteの情報を使いたい場合は（_extension.scss: sprite-info）</p>

<h3>
<span id="sprite-make" class="fragment"></span><a href="#sprite-make"><i class="fa fa-link"></i></a>sprite-make</h3>

<h4>
<span id="初期設定説明" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include sprite-make(
    '', //スプライト化したい画像: sprite-map()の第一引き数にいれるファイル名。（配列で複数指定することができます。）
    5px, //スプライト化した時の画像と画像の間のサイズ: sprite-map()の$spacingの値
    true , // true or false: 吐き出すCSSにクラス名2つをつけるか。（false:「.画像ファイル名」、true:「.スプライト名.画像ファイル名」となります。）
    $isRetina // true or false: Retina対応（画像サイズを半分に）するかしないか（予め_setting.scssで設定されてることを考慮）
);
</pre></div></div>

<h4>
<span id="scss" class="fragment"></span><a href="#scss"><i class="fa fa-link"></i></a>SCSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include sprite_make((
    'num/*.png'
));
</pre></div></div>

<h4>
<span id="css" class="fragment"></span><a href="#css"><i class="fa fa-link"></i></a>css</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>.num.img1, .num.img2, .num.img3 {
    display: block;
    background-image: url('/html/img/num-sce8bc88143.png');
    background-repeat: no-repeat;
    background-size: 50px 270px;
}

.num.img1 {
    background-position: 0 -220px;
    width: 50px;
    height: 50px;
}

.num.img2 {
    background-position: 0 -110px;
    width: 50px;
    height: 50px;
}

.num.img3 {
    background-position: 0 0;
    width: 50px;
    height: 50px;
}
</pre></div></div>

<h2>
<span id="便利なmixin_extensionscss" class="fragment"></span><a href="#%E4%BE%BF%E5%88%A9%E3%81%AAmixin_extensionscss"><i class="fa fa-link"></i></a>便利なmixin（_extension.scss）</h2>

<h3>
<span id="background-fit" class="fragment"></span><a href="#background-fit"><i class="fa fa-link"></i></a>background-fit</h3>

<p>画像のサイズを取得しbackground-size,width,heightをセットする。<br>
CSSで背景に画像を入れる時に毎回サイズを入れる作業を省いてくれます。特にRetina対応で画像サイズを半分にしたいときには便利です。</p>

<ol>
<li>まず前提として、config.rbの<code>images_dir</code>を設定してください。</li>
<li>width,heightが必要ない場合には第2引き数を<code>false</code>にする。</li>
<li>複数画像を指定したい場合は配列で（例: <code>('test.png','test2.gif',linear-gradient(#000,#fff)</code>）</li>
<li>複数画像を指定した場合は第3引き数に複数指定する。（例: <code>('0 0 no-repeat','left top repeat','0 0 no-repeat')</code>）</li>
<li>関数実行後$imgWidth,$imgHeightの中に画像のサイズが入ります。<br>複数の場合配列に入るのでnth($imgWidth,1),nth($imgHeight,2)のように取ってくることができます。</li>
</ol>

<h4>
<span id="初期設定説明-1" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-1"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include background-fit(
    '', // 画像のパス: images_dirで指定したパスからの画像ファイル名（配列で複数指定可能,グラデーション指定も可能）
    true, // true or false: 画像をサイズいっぱいに表示してテキストを消す or 画像とbackgrouns-sizeのみの指定をするか）
    '0 0 no-repeat', // 画像に対してのrepeat position: (複数の場合の例: ('0 0 no-repeat','left top repeat'))
    '', //'!important': !importantを指定したい場合（必要ない場合は空）
    $isBase64, // true or false: base64にするかしないか (予め_setting.scssで設定されてることを考慮）
    $isRetina // true or false: Retina対応（画像サイズを半分に）するかしないか（予め_setting.scssで設定されてることを考慮）
);
</pre></div></div>

<h4>
<span id="scss-1" class="fragment"></span><a href="#scss-1"><i class="fa fa-link"></i></a>SCSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include background-fit(
    ("text.png",linear-gradient(rgba(red,0.1),rgba(red,0.3))),
    false,
    ('center 5px no-repeat','0 0 no-repeat')
);
</pre></div></div>

<h4>
<span id="css-1" class="fragment"></span><a href="#css-1"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>background: url('/html/img/text.png?1396155926') center 5px no-repeat, linear-gradient(rgba(255, 0, 0, 0.1), rgba(255, 0, 0, 0.3)) 0 0 no-repeat;
background-size: 327px 29px, auto auto;
</pre></div></div>

<h3>
<span id="half-image-width" class="fragment"></span><a href="#half-image-width"><i class="fa fa-link"></i></a>half-image-width</h3>

<p>画像の半分の横幅の値を返す（複数画像を配列で指定可能）</p>

<ol>
<li>関数実行後$imgWidthの中に画像のサイズが入ります。<br>複数の場合配列に入るのでnth($imgWidth,1)のように取ってくることができます。</li>
</ol>

<h4>
<span id="scss-2" class="fragment"></span><a href="#scss-2"><i class="fa fa-link"></i></a>SCSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>width: half-image-width('test.png');
</pre></div></div>

<h4>
<span id="css-2" class="fragment"></span><a href="#css-2"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>width: 100px;
</pre></div></div>

<h3>
<span id="half-image-height" class="fragment"></span><a href="#half-image-height"><i class="fa fa-link"></i></a>half-image-height</h3>

<p>画像の半分の高さの値を返す（複数画像を配列で指定可能）</p>

<ol>
<li>関数実行後$imgHeightの中に画像のサイズが入ります。<br>複数の場合配列に入るのでnth($imgHeight,1)のように取ってくることができます。</li>
</ol>

<h4>
<span id="scss-3" class="fragment"></span><a href="#scss-3"><i class="fa fa-link"></i></a>SCSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>height: half-image-width('test.png');
</pre></div></div>

<h4>
<span id="css-3" class="fragment"></span><a href="#css-3"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>height: 100px;
</pre></div></div>

<h3>
<span id="sprite-info" class="fragment"></span><a href="#sprite-info"><i class="fa fa-link"></i></a>sprite-info</h3>

<p>スプライト画像のサイズとポジションを設定する</p>

<h4>
<span id="初期設定説明-2" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-2"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include triangle-set(
    10px, //大きさ: 10px 20px のように2つ値を書くことで横と高さを指定することができます。
    black, // 色
    top //向き: top,right,bottom,left
);
</pre></div></div>

<h4>
<span id="scss-4" class="fragment"></span><a href="#scss-4"><i class="fa fa-link"></i></a>SCSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$map: sprite-map('num/*.png', $spacing: 5px);
p {
    @include sprite-info($map,img3);
}
</pre></div></div>

<h4>
<span id="css-4" class="fragment"></span><a href="#css-4"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>background-image: url('/html/img/num-sce8bc88143.png');
background-size: 50px 270px;
background-position: 0 0;
width: 50px;
height: 50px;
</pre></div></div>

<h3>
<span id="text-shadow-repeat" class="fragment"></span><a href="#text-shadow-repeat"><i class="fa fa-link"></i></a>text-shadow-repeat</h3>

<p>同じテキストシャドウを繰り返したい場合</p>

<h4>
<span id="scss-5" class="fragment"></span><a href="#scss-5"><i class="fa fa-link"></i></a>SCSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include text-shadow-repeat(0 0 3px #000,5);
</pre></div></div>

<h4>
<span id="css-5" class="fragment"></span><a href="#css-5"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>text-shadow: 0 0 3px black,0 0 3px black,0 0 3px black,0 0 3px black,0 0 3px black;
</pre></div></div>

<h3>
<span id="box-shadow-repeat" class="fragment"></span><a href="#box-shadow-repeat"><i class="fa fa-link"></i></a>box-shadow-repeat</h3>

<p>同じボックスシャドウを繰り返したい場合</p>

<h4>
<span id="scss-6" class="fragment"></span><a href="#scss-6"><i class="fa fa-link"></i></a>SCSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include box-shadow-repeat(0 0 10px #fff,10);
</pre></div></div>

<h4>
<span id="css-6" class="fragment"></span><a href="#css-6"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>box-shadow: 0 0 10px black,0 0 10px black,0 0 10px black,0 0 10px black,0 0 10px black;
</pre></div></div>

<h3>
<span id="display-box-center" class="fragment"></span><a href="#display-box-center"><i class="fa fa-link"></i></a>display-box-center</h3>

<p>display: box;にし中身を縦横のcenter寄せにする。<br>
dwebkitに対応したサイトを作る際に役立ちます。</p>

<h4>
<span id="scss-7" class="fragment"></span><a href="#scss-7"><i class="fa fa-link"></i></a>SCSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include display-box-center();
</pre></div></div>

<h4>
<span id="css-7" class="fragment"></span><a href="#css-7"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>display: box;
box-align: center;
box-pack: center;
</pre></div></div>

<h3>
<span id="triangle" class="fragment"></span><a href="#triangle"><i class="fa fa-link"></i></a>triangle</h3>

<p>三角形を作る</p>

<h4>
<span id="初期設定説明-3" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-3"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include triangle-set(
    10px, //大きさ: 10px 20px のように2つ値を書くことで横と高さを指定することができます。
    black, // 色
    top //向き: top,right,bottom,left
);
</pre></div></div>

<h3>
<span id="triangle-set" class="fragment"></span><a href="#triangle-set"><i class="fa fa-link"></i></a>triangle-set</h3>

<p>作った三角形を向きに合わせてボックスの外側にセットする（吹き出し風になるようにセットする）</p>

<ol>
<li>吹き出し風にしたい場合にtriangleを使わずこっちを使う。</li>
</ol>

<h4>
<span id="初期設定説明-4" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-4"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include triangle-set(
    10px, //大きさ: 10px 20px のように2つ値を書くことで横と高さを指定することができます。
    black, // 色
    top, // 向き: top,right,bottom,left
    50%, // 位置: 三角形をボックスのどの位置にセットするか（真ん中の場合50%）
    after // before or after どちらを使うか
);
</pre></div></div>

<h3>
<span id="arrow" class="fragment"></span><a href="#arrow"><i class="fa fa-link"></i></a>arrow</h3>

<p>矢印を作る</p>

<h4>
<span id="初期設定説明-5" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-5"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include arrow(
    10px, // 大きさ
    1px, // 太さ
    white, // 色
    right, // 向き: top,right,bottom,left
);
</pre></div></div>

<h3>
<span id="arrow-set" class="fragment"></span><a href="#arrow-set"><i class="fa fa-link"></i></a>arrow-set</h3>

<p>作った矢印を向きに合わせてボックスにセットする</p>

<h4>
<span id="初期設定説明-6" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-6"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include arrow-set(
    10px, // 大きさ
    1px, // 太さ
    white, // 色
    right, // 向き: top,right,bottom,left
    50%, // 位置: 三角形をボックスのどの位置にセットするか（真ん中の場合50%）
    after // before or after どちらを使うか
);
</pre></div></div>

<h3>
<span id="background-4corners" class="fragment"></span><a href="#background-4corners"><i class="fa fa-link"></i></a>background-4corners</h3>

<p>4つ角に同じ画像を回転・反転させておきたい場合</p>

<h4>
<span id="初期設定説明-7" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-7"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include background-4corners(
    '', //images_dirで指定したパスからの画像ファイル名
    $isRetina // true or false Retina対応（画像サイズを半分に）するかしないか
                （初期値は予め_setting.scssで設定されてることを考慮）
);
</pre></div></div>

<p>詳しい仕様の説明は下記より</p>

<ul>
<li><a href="http://develo.org/2014/05/11/2100.html" rel="nofollow noopener" target="_blank">1つの画像で4つの角を再現するCSS</a></li>
</ul>

<h3>
<span id="background-stripe" class="fragment"></span><a href="#background-stripe"><i class="fa fa-link"></i></a>background-stripe</h3>

<p>ストライプ背景の生成</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include background-stripe(
    10, //1つ目のストライプのサイズ
    transparent,    //1つ目のストライプの色
    10, //2つ目のストライプのサイズ
    rgba(255,255,255,0.5), //2つ目のストライプの色
    -45deg //ストライプの角度（45度単位)
);
</pre></div></div>

<h3>
<span id="es" class="fragment"></span><a href="#es"><i class="fa fa-link"></i></a>es</h3>

<p>基準となるサイズに対する値を、さまざまな単位にエンコード（encode size）</p>

<h4>
<span id="初期設定説明-8" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-8"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>margin: es(
    '', // 変換したいサイズ
    $font-unit, // 変換したい単位（%,em,rem,px）（初期値は予め_setting.scssで設定されてることを考慮）
    $font-sizeDefault // 変換の基準となる値（初期値は予め_setting.scssで設定されてることを考慮）
);
</pre></div></div>

<h4>
<span id="scss-8" class="fragment"></span><a href="#scss-8"><i class="fa fa-link"></i></a>SCSS</h4>

<p>例）16pxのサイズのspanを12pxの%に変換したい場合</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include fz(12,'','%',16);
//または
$font-unit: '%';
$font-sizeDefault: 16;
@include fz(12);
</pre></div></div>

<h4>
<span id="css-8" class="fragment"></span><a href="#css-8"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>font-size: 75%;
</pre></div></div>

<h3>
<span id="fz" class="fragment"></span><a href="#fz"><i class="fa fa-link"></i></a>fz</h3>

<p>指定した単位にフォントサイズを変換しfont-sizeを代入する</p>

<ul>
<li>remの場合remが使えない場合のためにpxも出力する</li>
</ul>

<h4>
<span id="初期設定説明-9" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-9"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>＠include fz(
    '', // 変換したいサイズ
    '', //!importantを指定したい場合（必要ない場合は空）
    $font-unit, // 変換したい単位（%,em,rem,px）（初期値は予め_setting.scssで設定されてることを考慮）
    $font-sizeDefault // 変換の基準となる値（初期値は予め_setting.scssで設定されてることを考慮）
);
</pre></div></div>

<h4>
<span id="scss-9" class="fragment"></span><a href="#scss-9"><i class="fa fa-link"></i></a>SCSS</h4>

<p>例）16pxのサイズのspanを12pxの%に変換したい場合</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include fz(12,'',rem,10);
//または
$font-unit: rem;
$font-sizeDefault: 10;
@include fz(12);
</pre></div></div>

<h4>
<span id="css-9" class="fragment"></span><a href="#css-9"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>font-size: 12px;
font-size: 1.2rem;
</pre></div></div>

<h3>
<span id="golden-ratio" class="fragment"></span><a href="#golden-ratio"><i class="fa fa-link"></i></a>golden-ratio</h3>

<p>黄金比の計算</p>

<h4>
<span id="初期設定説明-10" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-10"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>＠include golden-ratio(
    0, // この数字に対しての黄金比（$num * 1.618）
    false, // trueの場合 第1引き数の数字を元にした（$num / 1.618）
);
</pre></div></div>

<h3>
<span id="silver-ratio" class="fragment"></span><a href="#silver-ratio"><i class="fa fa-link"></i></a>silver-ratio</h3>

<p>白銀比の計算</p>

<h4>
<span id="初期設定説明-11" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E8%AA%AC%E6%98%8E-11"><i class="fa fa-link"></i></a>初期設定・説明</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>＠include silver-ratio(
    0, // この数字に対しての黄金比（$num * 1.414）
    false, // trueの場合 第1引き数の数字を元にした（$num / 1.414）
);
</pre></div></div>

<h3>
<span id="clearfix" class="fragment"></span><a href="#clearfix"><i class="fa fa-link"></i></a>clearfix</h3>

<p>引き数内のクラスにclearfixを付ける</p>

<ol>
<li>
<code>@include clearfix();</code>とかくとclearfixクラスがclearfixとなるcssが出力される。</li>
<li>
<code>@extend %clearfix;</code>することによりクラスを追加していく。</li>
</ol>

<h4>
<span id="scss-10" class="fragment"></span><a href="#scss-10"><i class="fa fa-link"></i></a>SCSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@include clearfix();

.test {
    @extend %clearfix;
}
</pre></div></div>

<h4>
<span id="css-10" class="fragment"></span><a href="#css-10"><i class="fa fa-link"></i></a>CSS</h4>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>.clearfix,
.test {
    min-height: 1px;
    _height: 1%;
}
.clearfix:after,
.test:after {
    content: ".";
    display: block;
    clear: both;
    height: 0;
    visibility: hidden;
}
</pre></div></div>
]]></content>
        <published>2014-05-19T03:30:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[指定のクラスを複数のタグに追加したり、削除したりをtoggleするjQueryプラグイン]]></title>
        <id>93459936648329b0a8ce</id>
        <link href="https://clover.blue/items/93459936648329b0a8ce">
        </link>
        <updated>2014-08-04T01:16:46.000Z</updated>
        <content type="html"><![CDATA[<p>1回目にクリックした時は例えば「on」というクラスが付き、2回目クリックした時は「on」が削除されるような場合に使えます。</p>

<p>クリック時に複数のクラスを変えたい場合などに、jsを書き換える必要がないような仕組みにしています。</p>

<p>割りと使う機会が多い機能でなのに、いままでプラグイン可していなかったので使いやすいようにプラグイン化してみました。</p>

<p>GitHub: <a href="https://github.com/kamem/jquery.dataExtend" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.dataExtend</a></p>

<p>（jQuery.dataExtedの説明と合わせて同じリポジトリに入っています。）</p>

<p><a href="http://github.develo.org/jquery.dataExtend/extraToggleClass.html" rel="nofollow noopener" target="_blank">DEMO</a></p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ol>
<li>クリックしたタグのクラスをtoggleする。</li>
<li>他要素もしたい場合は「content_（toggleしたいタグのクラス名）」のように指定する。</li>
<li>ストレージ保存可能。</li>
</ol>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/jquery.tab.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
     $('.toggle').extraToggleClass();
});
&lt;/script&gt;
</pre></div></div>

<h3>
<span id="html" class="fragment"></span><a href="#html"><i class="fa fa-link"></i></a>html</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p class="toggle content_test"&gt;toggle click&lt;/p&gt;

&lt;p class="test"&gt;test&lt;/p&gt;
&lt;p class="test"&gt;test&lt;/p&gt;
</pre></div></div>

<ul>
<li>「content_test」「content_」の後の文字（例の場合test）クラスが付いているタグのクラスも一緒にtoggleします。</li>
</ul>

<h3>
<span id="初期設定" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>name: 'on',
isSessionStorage: false
</pre></div></div>

<ul>
<li>name: {String} toggleしたいクラス名</li>
<li>isSessionStorage: {Boolean} ストレージに保存するか</li>
</ul>
]]></content>
        <published>2014-08-03T09:23:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[タブとかスライドショーとかのコンテンツ切り替え用jQueryプラグイン]]></title>
        <id>bb11e8b8027b7b5c44be</id>
        <link href="https://clover.blue/items/bb11e8b8027b7b5c44be">
        </link>
        <updated>2014-08-01T17:38:18.000Z</updated>
        <content type="html"><![CDATA[<p>タブとかスライドショーを実装するのに毎回探したり、その場実装で作ったりしていました・・。</p>

<p>そろそろ楽するためにも「ちゃんと作っておこう！」と思い、標準的な機能を組み込んだプラグインを作りました！</p>

<p>GitHub: <a href="https://github.com/kamem/jquery.dataExtend" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.dataExtend</a></p>

<p>（jQuery.dataExtedの説明と合わせて同じリポジトリに入っています。）</p>

<p><a href="http://github.develo.org/jquery.dataExtend" rel="nofollow noopener" target="_blank">DEMO</a></p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ol>
<li>タブ移動のような単純な切り替え。</li>
<li>スライドショーの実装。</li>
<li>タブの位置をストレージに保存。</li>
<li>基本的な表示切り替えはクラスを変えることにより実装しています。※表示中のコンテンツはonそれ以外のコンテンツはoffが付きます。<br>
（slideshow or opacityの場合は、クラス変更とは別にleftやopacityをjsで変更しています。）</li>
</ol>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/jquery.tab.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
     $('.tab').tab();
});
&lt;/script&gt;
</pre></div></div>

<h3>
<span id="html" class="fragment"></span><a href="#html"><i class="fa fa-link"></i></a>html</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;ul class="nav content_main"&gt;
    &lt;li&gt;nav1&lt;/li&gt;
    &lt;li&gt;nav2&lt;/li&gt;
    &lt;li&gt;nav3&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="main_assist"&gt;
    &lt;li class="prev"&gt;prev&lt;/li&gt;
    &lt;li class="next"&gt;next&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="main"&gt;
    &lt;section&gt;
        &lt;h2&gt;&lt;a href="#content1"&gt;1&lt;/a&gt;&lt;/h2&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;h2&gt;&lt;a href="#content2"&gt;2&lt;/a&gt;&lt;/h2&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;h2&gt;&lt;a href="#content3"&gt;3&lt;/a&gt;&lt;/h2&gt;
    &lt;/section&gt;
&lt;/div&gt;
</pre></div></div>

<ul>
<li>ナビゲーションとして使いたい部分をプラグインとして指定します。</li>
<li>そのタグのクラスに付いている「content_main」「content_」の後の文字（例の場合main）クラスが付いているエリアの子要素がタブとして切り替わります。</li>
<li>「前」や「後ろ」に進む操作をしたい場合は「main_assist」のように「タブ移動したいコンテンツクラス_assist」というタグで囲った子要素に「prev」と「next」クラスをそれぞれ付けることが実装できます。</li>
</ul>

<h3>
<span id="初期設定" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>timer: false,
num: 0,
isSessionStorage: false,
type: 'normal',
speed: 400,
easing: 'linear',
isRoop: false
</pre></div></div>

<ul>
<li>timer: {Number} タブの自動移動の感覚（setinterval）</li>
<li>num: {Number} 初期位置</li>
<li>isSessionStorage: {Boolean} ストレージに保存するか</li>
<li>type: {String} 移動時の動きのタイプ (slideshow or opacity)</li>
<li>speed: {Number} 移動速度</li>
<li>easing: {String} イージングのタイプ <a href="http://semooh.jp/jquery/cont/doc/easing/" rel="nofollow noopener" target="_blank">Easing/jQuery</a><br>
イージングが必要な場合には、イージングプラグインを別途読み込んでください。</li>
<li>isRoop: {Boolean}「next」を押して次へ進んだ時に「最後から最初」の移動を戻るのではなくループするようにするか</li>
</ul>
]]></content>
        <published>2014-08-01T17:21:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gruntでコピーライトつきの.minファイルを作る]]></title>
        <id>ee18c00d7eda3dfe3509</id>
        <link href="https://clover.blue/items/ee18c00d7eda3dfe3509">
        </link>
        <updated>2014-07-25T09:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/grunt.jsmin" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/grunt.jsmin</a><br>
GitHub: <a href="https://github.com/kamem/grunt.jsmin" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/grunt.jsmin</a></p>

<p>javascriptのファイルを圧縮するときにコピーライトと日付とかを手動でいれたりするのめんどくさいなぁ・・。と思っていたので</p>

<p>jsフォルダに入っているjsと同ファイル名.txtをコピーライトとして追加した.minファイルを作るgruntを作りました。</p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ol>
<li>grunt <code>--pluginName=ファイル名</code>
</li>
<li>pluginNameに圧縮したいjsの名前を指定すると、そのファイルがjsフォルダの同ファイル名.txtをコピーライトとしてminフォルダに同ファイル名.min.jsファイルが制作される</li>
</ol>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>grunt --pluginName=jquery.sample 
</pre></div></div>

<p>プラグインとか公開する用にいいかなぁと思います！</p>
]]></content>
        <published>2014-05-30T10:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery Plugin パラメーターの代わりにdata属性で代用できるプラグイン]]></title>
        <id>94e974a0212396d97ed7</id>
        <link href="https://clover.blue/items/94e974a0212396d97ed7">
        </link>
        <updated>2014-07-25T09:18:37.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/jquery.dataExtend" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/jquery.dataExtend</a><br>
GitHub: <a href="https://github.com/kamem/jquery.dataExtend" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.dataExtend</a></p>

<p>プラグインを複数のページなどで違う動作をしたい場合に<br>
わざわざjsを用意して指定し直さないければいけないのが煩わしいと思っていたので<br>
かわりにdata-*で指定したパラメーターを使うことができるjQuery プラグインを作りました。</p>

<p><a href="http://github.develo.org/jquery.dataExtend/" rel="nofollow noopener" target="_blank">DEMO</a></p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ul>
<li>
<p>下記のようなプラグインがあった場合に</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$('.tab').tab{
    timer: 1000,
    num: 1,
    isSessionStorage: true
};
</pre></div></div>
</li>
<li>
<p>下記のようにHTMLのdata属性を代わりに使うことができます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p class="tab" data-timer="1000" data-num="1" is-session-storage="true"&gt;
</pre></div></div>
</li>
</ul>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<ol>
<li>
<p>スクリプトの記述（プラグインの後にjquery.dataExtend.jsを読むこむ）</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script src="js/jquery.tab.js"&gt;&lt;/script&gt;
&lt;script src="js/jquery.dataExtend.js"&gt;&lt;/script&gt;
</pre></div></div>
</li>
<li>
<p>$('適応したいタグ').dataExtemd('プラグイン名');</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script&gt;
$(function(){
    $('.nav').dataExtend('tab');
});
&lt;/script&gt;
</pre></div></div>
</li>
<li>
<p>HTMLにdata属性を記述する（キャメルケースの場合「-」でつなげる）※ is-session-storage = isSessionStorage</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;p class="tab" data-timer="1000" data-num="1" is-session-storage="true"&gt;
</pre></div></div>
</li>
</ol>
]]></content>
        <published>2014-06-21T04:58:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[紙吹雪を降らせるjQueryプラグイン]]></title>
        <id>181949dee3aa7a714b9d</id>
        <link href="https://clover.blue/items/181949dee3aa7a714b9d">
        </link>
        <updated>2014-06-28T07:35:37.000Z</updated>
        <content type="html"><![CDATA[<p>生徒の作品に使えそうかなぁと思ったのと、<br>
紙吹雪ってキャンバス意外で綺麗に見えてるのがあまりなかったので作ってみました！</p>

<p>ただやっぱりcanvasじゃないので、たくさんのタグを生成すると重くなっちゃいますね。</p>

<p>site: <a href="http://develo.org/2014/06/28/1557.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/06/28/1557.html</a><br>
GitHub: <a href="https://github.com/kamem/jquery.confetti" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.confetti</a></p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ol>
<li>指定の数だけ紙吹雪をふらせる</li>
<li>htmlとcssアニメーションで紙吹雪を再現</li>
<li>domなので少し重いため数は制限する必要がある</li>
<li>bodyの一番したにタグを生成</li>
<li>画面外から消えた時にタグを削除</li>
<li>全てのタグが画面外に消えた場合にcomplateを実行</li>
</ol>

<p><a href="http://github.develo.org/jquery.confetti/" rel="nofollow noopener" target="_blank">DEMO</a></p>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/jquery.confetti.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $('html').confetti();
});
&lt;/script&gt;
</pre></div></div>

<h2>
<span id="オプション" class="fragment"></span><a href="#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3"><i class="fa fa-link"></i></a>オプション</h2>

<h3>
<span id="初期設定" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>x: $content.offset().left + $content.width() / 2,
y: $content.offset().top + $content.height() / 2,
num: 20,
speedRange: 10,
airResistanceNum:  0.95,
gravityNum: 0.45,
intervalSpeed: 30,
complate: false
</pre></div></div>

<p>※ [x,y] defaultでは指定したタグの位置+タグの半分の位置</p>

<ul>
<li>x: {Number} offset().left + width() / 2</li>
<li>y: {Number} offset().top + height() / 2</li>
<li>num: {Number} 紙吹雪の数</li>
<li>speedRange: {Number} 初速度の範囲</li>
<li>airResistanceNum:  {Number} 空気抵抗</li>
<li>gravityNum: {Number} 重力</li>
<li>intervalSpeed: {Number} 処理をどのぐらいの感覚で行うか</li>
<li>complate: {Function} 全てのタグが画面外に消えた場合実行される関数</li>
</ul>

<h2>
<span id="例" class="fragment"></span><a href="#%E4%BE%8B"><i class="fa fa-link"></i></a>例</h2>

<p>htmlのどこかをクリックした際にクリック位置から紙吹雪をちらす</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(function(){
    $('html').click(function(e){
        $('[class*=confetti]').remove();
        $('html').confetti({
            x: e.pageX,
            y: e.pageY,
            complate:function(){
                alert('complate');
            }
        });
    });
});
</pre></div></div>
]]></content>
        <published>2014-06-28T06:19:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[pushStateとAjaxの組み合わせpjax]]></title>
        <id>b0c8f69044556865027f</id>
        <link href="https://clover.blue/items/b0c8f69044556865027f">
        </link>
        <updated>2014-05-23T01:59:29.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/2014/04/29/1614.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/04/29/1614.html</a></p>

<p>サイトをpjaxを使って実装して思ったのですが、ページ移動がものすごくはやくて快適！今後サイト新しく作るときはpushStateとAjaxの組み合わせ検討してみてもよいかなぁって思いました！</p>

<h2>
<span id="pushstateとは" class="fragment"></span><a href="#pushstate%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>pushStateとは</h2>

<p>Ajaxなどで、非同期なサイトを作る際に、<br>
アドレスが変更されない問題をjsで解消してくれる便利なやつです。<br>
少し前の話だとFlashサイトを作るときに#（ハッシュ）をつけてurlを管理したりしていました。<br>
pushStateを使うと普通にページ遷移しているようにアドレスを変更することができます！</p>

<h2>
<span id="ajaxとは" class="fragment"></span><a href="#ajax%E3%81%A8%E3%81%AF"><i class="fa fa-link"></i></a>Ajaxとは</h2>

<p>ページを遷移せずに情報だけを非同期でとってきてサイトに描画する仕組みのことです。</p>

<h2>
<span id="pjax" class="fragment"></span><a href="#pjax"><i class="fa fa-link"></i></a>pjax</h2>

<p>pushStateとAjax 2つを合わせてつくった仕組みのことです。</p>

<h2>
<span id="実際に作るにあたり" class="fragment"></span><a href="#%E5%AE%9F%E9%9A%9B%E3%81%AB%E4%BD%9C%E3%82%8B%E3%81%AB%E3%81%82%E3%81%9F%E3%82%8A"><i class="fa fa-link"></i></a>実際に作るにあたり</h2>

<p>下記を参考にさせていただきました。<br>
jquery-pjaxというプラグインを使うと簡単に実装することができます。</p>

<ul>
<li><a href="http://s3pw.com/milestoner/2012/08/pushstate-popstate/" rel="nofollow noopener" target="_blank">pushState / popStateの解説とQrefyにおける実践コード</a></li>
<li><a href="https://github.com/defunkt/jquery-pjax/" rel="nofollow noopener" target="_blank">defunkt/jquery-pjax</a></li>
</ul>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<p>下記のような感じで実行するだけで実装できます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(document).pjax('a', {
    container:'main',  // 現在のページの置き換えたいエリアのタグを指定
    fragment: 'main', // 読み込み先ページの置き換えたいエリアのタグを指定
    timeout: 30000 // タイムアウトする時間（タイムアウトした場合は通常のリンクでの移動になります。）
});
</pre></div></div>

<p>このコードは「a」タグをクリックした時に現在のページのmain要素部分を、読み込み先のhtmlのmain要素に置き換える。といった動きになります。</p>

<p>timeoutを設定しているのはプラグインの初期のtimeout設定が650msと少し短いため3秒はtimeoutしないように指定しなおしています。</p>

<p>ローディング時の処理をする。</p>

<h4>
<span id="pjaxsend" class="fragment"></span><a href="#pjaxsend"><i class="fa fa-link"></i></a>pjax:send</h4>

<p>ajaxの処理が始まった時点で実行されます。<br>
この時にローディング時の処理をかきます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(document).on('pjax:send', function(e) {
    $('body').addClass('loading');
});
</pre></div></div>

<h4>
<span id="pjaxcomplete" class="fragment"></span><a href="#pjaxcomplete"><i class="fa fa-link"></i></a>pjax:complete</h4>

<p>ajaxの処理が終わった時点で実行されます。ローディングが終わった時の処理をかきます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(document).on('pjax:complete', function(e,data) {
    $('body').removeClass('loading');
});
</pre></div></div>

<p>こんな感じで書くと実装できるので、割と簡単ですね！</p>

<h2>
<span id="応用" class="fragment"></span><a href="#%E5%BF%9C%E7%94%A8"><i class="fa fa-link"></i></a>応用</h2>

<h3>
<span id="cssシグネチャを使っている場合の対処法" class="fragment"></span><a href="#css%E3%82%B7%E3%82%B0%E3%83%8D%E3%83%81%E3%83%A3%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95"><i class="fa fa-link"></i></a>CSSシグネチャを使っている場合の対処法</h3>

<p>CSSシグネチャというのはbodyにclassやidをつけてcssで管理する方法です。</p>

<p>pjaxのプラグインを使うと指定エリア外のbodyのclassやidは変更してくれません。そのためページごとのCSSが反映されないという現象がおきてしまいます。</p>

<h4>
<span id="解決方法--pjaxcomplete時にbodyの属性を変更する" class="fragment"></span><a href="#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95--pjaxcomplete%E6%99%82%E3%81%ABbody%E3%81%AE%E5%B1%9E%E6%80%A7%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>解決方法 : pjax:complete時にbodyの属性を変更する</h4>

<p>読み込み先のテキスト情報を元に、範囲指定して特定のテキストを取得する正規表現を使いbodyの情報を変更します。（<a href="http://develo.org/2014/04/24/1219.html" rel="nofollow noopener" target="_blank">特定の文字列から文字列の範囲内の文字を取得する正規表現</a>）</p>

<p>RegExp.$1で最初にマッチした値を取ってくることができます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$(document).on('pjax:complete', function(e,data) {
    var data = data.responseText;   //2つ目の引き数のresponseTextの中身に読み込みさきのtextデータが含まれています。

    //responseTextの内容を正規表現を使うことによりbodyのclassとidを変更する。
    //bodyのID
    data.match(/id="([^\"]+)/);
    var value = RegExp.$1;
    $('body')[0].id = value;
    //bodyのClass
    data.match(/class="([^\"]+)/);
    value = RegExp.$1;
    $('body')[0].className = value;
});
</pre></div></div>

<p>こんな感じでプラグインで指定した範囲以外のタグも変更することができます。これを使<br>
えば、keywordsやdescriptionやogタグを変更することもできます。</p>

<h2>
<span id="ブラウザバック時の再読み込み" class="fragment"></span><a href="#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%90%E3%83%83%E3%82%AF%E6%99%82%E3%81%AE%E5%86%8D%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF"><i class="fa fa-link"></i></a>ブラウザバック時の再読み込み</h2>

<p>ブラウザバック時にcssシグネチャを使っていると同じ現象がおきてしまいます。</p>

<p>なので・・どうしようと迷ったのですが・・。</p>

<p>ブラウザバック時、キャッシュを読みにいく処理が入っているようで、その部分を変更しブラウザバック時にも再度読み込み直すようにプラグイン事態を変更しちゃいました。何か他にプラグインを変更せずにすめば良いと思ったのですが・・。</p>

<p>440 〜 450行目あたりをコメントアウトして変更しちゃいます。</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>/*
    if (contents) {
        container.trigger('pjax:start', [null, options, contents])

        if (state.title) document.title = state.title
        container.html(contents)
        pjax.state = state

        container.trigger('pjax:end', [null, options, contents])
    } else {
        pjax(options)
    }
*/
pjax(options)
</pre></div></div>

<p>こんな感じでキャッシュがある場合はキャッシュを使って変更している部分を毎回読み込むように変更しちゃいます！</p>

<p>これでひと通りCSSシグネチャを使った場合でもpjaxプラグインで実装することができました！</p>
]]></content>
        <published>2014-05-23T01:59:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[テキストを1文字づつアニメーションで表示させるjQueryプラグイン]]></title>
        <id>8cfae412a6161ae23e77</id>
        <link href="https://clover.blue/items/8cfae412a6161ae23e77">
        </link>
        <updated>2014-05-21T15:57:05.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/2014/05/07/0900.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/05/07/0900.html</a><br>
GitHub: <a href="https://github.com/kamem/jquery.textAnimation" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.textAnimation</a></p>

<p>テキストに1文字づつCSSでアニメーションをつけたら面白い動きになるんじゃないかなぁと思って作ってみました！値を設定できるようにしてみたら自分で予想してないような面白い動きも作れて楽しめました。<br>
値によってはハリーポッターとか映画でよくあるような文字の出方みたいになったり！</p>

<p><a href="http://github.develo.org/jquery.textAnimation/" rel="nofollow noopener" target="_blank">DEMO + Edit</a></p>

<p>（下のエリアのコードを使えばその動きを実行することができます。）</p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ol>
<li>1文字づつテキストをアニメーションで表示する</li>
</ol>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/jquery.textAnimation.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    $('.text1').textAnimation();
&lt;/script&gt;
</pre></div></div>

<h2>
<span id="オプション" class="fragment"></span><a href="#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3"><i class="fa fa-link"></i></a>オプション</h2>

<h3>
<span id="初期設定" class="fragment"></span><a href="#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>初期設定</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>speed: 1000,
delay: 200,
left: 0,
top: 0,
scale: 1,
rotateY: 0,
rotateX: 0,
translateZ: 0,
letterSpacing: $content.css(' letterSpacing'),
easing: 'ease-out',
backgroundColor: 'transparent',
isRandomScale:  false,
isRandomPosition:  false,
isRandomRotateY: false,
isRandomRotateX: false,
isRandomTranslateZ: false,
isRandomSpeed: false,
isRandomDelay: false
</pre></div></div>

<ul>
<li>speed: CSSのスピード（ms）</li>
<li>delay: 次の文字までの時間（ms）</li>
<li>left: leftの移動量（px）</li>
<li>top: topの移動量（px）</li>
<li>scale: transformのscale変化量</li>
<li>rotateY: transformのrotateY変化量</li>
<li>rotateX: transformのrotateX変化量</li>
<li>translateZ: transformのrotateZ変化量</li>
<li>letterSpacing: letter-spacing変化量</li>
<li>easing: transition-timing-functionで指定できるeasing,</li>
<li>backgroundColor: 変化させたい背景色</li>
<li>isRandomScale:  scaleをランダムの値にするか。（delayで指定した値までのランダム）</li>
<li>isRandomPosition: left,topをランダムの値にするか。（left,topで指定した値までのランダム  マイナスの値も含む 200の場合 -200 ~ 200となる）</li>
<li>isRandomRotateY: rotateYをランダムの値にするか。（rotateYで指定した値までのランダム）</li>
<li>isRandomRotateX: rotateXをランダムの値にするか。（rotateXで指定した値までのランダム）</li>
<li>isRandomTranslateZ: rotateZをランダムの値にするか。（rotateZで指定した値までのランダム）</li>
<li>isRandomSpeed: speedをランダムの値にするか。（speedで指定した値までのランダム）</li>
<li>isRandomDelay: delayをランダムの値にするか。</li>
</ul>
]]></content>
        <published>2014-05-21T15:57:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[dlを使ったtableのdtとddの高さを揃えるjQuery プラグイン]]></title>
        <id>fc97e9c3ee2f62f29bfa</id>
        <link href="https://clover.blue/items/fc97e9c3ee2f62f29bfa">
        </link>
        <updated>2014-05-19T15:07:55.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/2014/04/29/2219.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/04/29/2219.html</a><br>
GitHub: <a href="https://github.com/kamem/jquery.dlTableSet" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/jquery.dlTableSet</a></p>

<p>dlを使ってdt ddを横並びにしてテーブルを再現するときに、dtの高さがddよりも高い場合にレイアウトが崩れてしまいます。それを解消するためのjQueryプラグインです！単純に読み込ませてタグを指定するだけなのでお手軽です。</p>

<p><a href="http://github.develo.org/jquery.dlTableSet/" rel="nofollow noopener" target="_blank">DEMO</a></p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ul>
<li>dlを使ったtableのdtとddの高さを揃える</li>
<li>ひとつのdtに対して複数ddがあった場合 dtの高さをddの数で割った値が 一つのddの高さになる。</li>
</ul>

<h2>
<span id="使い方" class="fragment"></span><a href="#%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>使い方</h2>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>&lt;script type="text/javascript" src="js/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/jquery.dlTableSet.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $('dl.table').dlTableSet();
});
&lt;/script&gt;
</pre></div></div>
]]></content>
        <published>2014-05-18T01:26:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Macでの画像圧縮と設定]]></title>
        <id>1b15e1671478ec2d6402</id>
        <link href="https://clover.blue/items/1b15e1671478ec2d6402">
        </link>
        <updated>2014-05-18T12:24:54.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/2014/05/16/0237.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/05/16/0237.html</a><br>
GitHub: <a href="https://github.com/kamem/workflow.png-jpeg-mini" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/workflow.png-jpeg-mini</a></p>

<h2>
<span id="jpeg圧縮" class="fragment"></span><a href="#jpeg%E5%9C%A7%E7%B8%AE"><i class="fa fa-link"></i></a>jpeg圧縮</h2>

<ul>
<li><a href="http://www.jpegmini.com/" rel="nofollow noopener" target="_blank">JPEGmini</a></li>
</ul>

<h2>
<span id="pngの色圧縮" class="fragment"></span><a href="#png%E3%81%AE%E8%89%B2%E5%9C%A7%E7%B8%AE"><i class="fa fa-link"></i></a>pngの色圧縮</h2>

<ul>
<li><a href="http://pngmini.com/" rel="nofollow noopener" target="_blank">ImageAlpha</a></li>
</ul>

<h2>
<span id="gifjpegpngの圧縮" class="fragment"></span><a href="#gifjpegpng%E3%81%AE%E5%9C%A7%E7%B8%AE"><i class="fa fa-link"></i></a>gif,jpeg,pngの圧縮</h2>

<ul>
<li><a href="http://imageoptim.com/" rel="nofollow noopener" target="_blank">ImageOptim</a></li>
</ul>

<p>流れとしては下記のような感じ<br>
* jpeg: JPEGmini → ImageOptim<br>
* png: ImageAlpha → ImageOptim<br>
* gif: ImageOptim</p>

<h2>
<span id="ショートカットでファイルを圧縮" class="fragment"></span><a href="#%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%9C%A7%E7%B8%AE"><i class="fa fa-link"></i></a>ショートカットでファイルを圧縮</h2>

<ul>
<li>jpeg: jpegoptim → ImageOptim</li>
<li><p>png: ImageAlpha → ImageOptim</p></li>
<li><p><a href="http://www.yoheim.net/blog.php?q=20130802" rel="nofollow noopener" target="_blank">JPGファイルをコマンドラインで圧縮するツールが便利！</a></p></li>
</ul>

<ol>
<li>png-jpeg-mini.workflowファイルを「/（ユーザー名）/ライブラリ/Services/ 」ここに格納</li>
<li>システム環境設定 → キーボード → キーボードショーットカットタブ</li>
<li>左側のメニューから「アプリケーション」を選択</li>
<li>ちょっと下にある「+」ボタンを押下</li>
<li>アプリケーション：Finder<br>
メニュータイトル：png-jpeg-mini<br>
キーボードショーットカット：（任意）</li>
</ol>
]]></content>
        <published>2014-05-18T12:19:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[1つの画像で4つの角を再現するCSS]]></title>
        <id>f4eb3c3508053db8e8b5</id>
        <link href="https://clover.blue/items/f4eb3c3508053db8e8b5">
        </link>
        <updated>2014-05-18T06:37:12.000Z</updated>
        <content type="html"><![CDATA[<p>site: <a href="http://develo.org/2014/05/11/2100.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/05/11/2100.html</a></p>

<p>4つの角を1つの画像を反転して置きたいときにいつも 「どうやったらできるんだろ・・。」と悩んでました。</p>

<p>あるとき・・。「こうやったらできるんじゃない！？」と閃いて試してみたらできたのでメモしときます。</p>

<h2>
<span id="仕様" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98"><i class="fa fa-link"></i></a>仕様</h2>

<ol>
<li>:before,:afterを使って再現。（なので背景は別で使うことができます。）</li>
<li>-webkit-box-reflectを使うため、webkit系ブラウザのみ対応（スマホサイトなど作るときに役立つ！）</li>
</ol>

<h2>
<span id="css" class="fragment"></span><a href="#css"><i class="fa fa-link"></i></a>CSS</h2>

<p>sectionタグの4つ角に設定したい場合</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>section {
    position: relative;
}

section:before,
section:after {
    content: '';
    display: block;
    background: url('test.gif') no-repeat;
    position: absolute;
    width: 50%;
    -webkit-box-reflect: right;
    height: 15px;
}

section:before {
    top: 0;
    left: 0;
}
section:after {
    right: 0;
    bottom: 0;
    -webkit-transform:rotate(-180deg);
}
</pre></div></div>

<h2>
<span id="demojsdoit" class="fragment"></span><a href="#demojsdoit"><i class="fa fa-link"></i></a>DEMO（jsdo.it）</h2>

<p><a href="http://jsdo.it/kamem/faGs" rel="nofollow noopener" target="_blank">1つの画像で4つの角を再現するCSS - jsdo.it</a></p>
]]></content>
        <published>2014-05-18T05:53:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sass,Compassでフォルダ内のファイルリストを取得するカスタム関数]]></title>
        <id>53769ca56ce037b43579</id>
        <link href="https://clover.blue/items/53769ca56ce037b43579">
        </link>
        <updated>2014-05-17T17:55:06.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>site: <a href="http://develo.org/2014/05/08/1000.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/05/08/1000.html</a>
</li>
<li>GitHub: <a href="https://github.com/kamem/compass.develo" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/compass.develo</a>
</li>
</ul>

<p>Sass,Compassでフォルダ内にある複数の画像をとってきて背景画像を指定したいときなどに、「全部書くのってめんどくさいなぁ・・」って思っていました。</p>

<p>なので！指定したフォルダ内のファイル名を取得してくれるやつを作ってみました！コードも省略できたり。<br>
新たにフォルダ内に画像を追加してコンパイルすればコードを書く手間も省けたりで使い勝手良いと思います。</p>

<h2>
<span id="仕様使い方" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>仕様・使い方</h2>

<ul>
<li>
<code>fileList('folderName/<em>')</em></code>でフォルダ内の全てのファイルリストが取得できます。（例えばgifの画像だけを取得したい場合には<code>fileList('folderName/.gif')</code>となります。）</li>
<li>初期状態ではcompass watchした場所からのパスを全て表示します。</li>
<li>第2引き数にfalseを入れることにより<code>fileList('folderName/*',false)</code>ファイル名 + 拡張子だけを取得することができます。</li>
<li>拡張子が必要ない場合には第3引き数に必要のない拡張子を指定します<code>fileList('folderName/*',false,'.gif')</code>
</li>
</ul>

<h2>
<span id="実際に使う" class="fragment"></span><a href="#%E5%AE%9F%E9%9A%9B%E3%81%AB%E4%BD%BF%E3%81%86"><i class="fa fa-link"></i></a>実際に使う</h2>

<p>「html/img」フォルダ内のgif画像を階層なし拡張子無しファイル名を取得したい場合。</p>

<p>「$images_dir」にconfig.rbで指定しているimages_dirの値を持っておくと便利です。<br>
※ config.rb内のimages_dirの値を取ってこれたら便利だなぁと思ったのですが、見つかりませんでしたので、sass内で持つようにしています。</p>

<h3>
<span id="sass" class="fragment"></span><a href="#sass"><i class="fa fa-link"></i></a>Sass</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$images_dir: 'html/img/';
$imgs: fileList($images_dir + "*.gif",false,'.gif');

.fileList li {
    @each $img in $imgs {
        #{"&amp;." + $img} {
            background: image-url("#{$img}.gif");
        }
    }
}
</pre></div></div>

<h3>
<span id="css" class="fragment"></span><a href="#css"><i class="fa fa-link"></i></a>CSS</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>.fileList li.img1 {
  background: url('/html/img/img1.gif?1394796721');
}
.fileList li.img2 {
  background: url('/html/img/img2.gif?1394796721');
}
.fileList li.img3 {
  background: url('/html/img/img3.gif?1394796721');
}
.fileList li.img4 {
  background: url('/html/img/img4.gif?1394796721');
}
.fileList li.img5 {
  background: url('/html/img/img5.gif?1394796721');
}
</pre></div></div>
]]></content>
        <published>2014-05-17T17:36:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sass,Compassファイルの有無を返してくれるカスタム関数]]></title>
        <id>90d2b5e60423f3188307</id>
        <link href="https://clover.blue/items/90d2b5e60423f3188307">
        </link>
        <updated>2014-05-17T17:52:55.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>site: <a href="http://develo.org/2014/05/08/1000.html" class="autolink" rel="nofollow noopener" target="_blank">http://develo.org/2014/05/08/1000.html</a>
</li>
<li>GitHub: <a href="https://github.com/kamem/compass.develo" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/kamem/compass.develo</a>
</li>
</ul>

<p>配列で繰り返し処理をし、<code>image-url</code>などを使ってその名前の画像を表示するような仕組みの場合<br>
そのファイルが無いとsassではエラーになってしまいます。<br>
その時にその画像の有無をとってきて画像がない場合には処理が走らないようにしたり。<br>
またはファイルの有無によって処理を変えたりなどの用途に使うことができます。</p>

<h2>
<span id="仕様使い方" class="fragment"></span><a href="#%E4%BB%95%E6%A7%98%E4%BD%BF%E3%81%84%E6%96%B9"><i class="fa fa-link"></i></a>仕様・使い方</h2>

<ol>
<li>
<p>config.rbに記述<br>
（rbフォルダ内に入れている場合）</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>require "./rb/isFile.rb"
</pre></div></div>
</li>
<li><p>isFile('fileName')で ture or false が文字列で返って来ます。<br>
※ fileNameは<code>compass watch</code>している場所からのパスになります。</p></li>
<li>
<p>実際に使う</p>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>@if isFile('fileName') == 'true' {

}
</pre></div></div>
</li>
</ol>

<h2>
<span id="例" class="fragment"></span><a href="#%E4%BE%8B"><i class="fa fa-link"></i></a>例</h2>

<p>img（数字）.gifの画像を背景に指定する際にimg6以降がない場合。</p>

<h3>
<span id="sass" class="fragment"></span><a href="#sass"><i class="fa fa-link"></i></a>Sass</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>$img: img1,img2,img3,img4,img5,img6,img7,img8,img9,img10;
$num: 0;
ol li {
    text-indent: -9999px;
    @each $name in $img {
        $num: $num + 1;
        &amp;#{':nth-child(' + $num + ')'} {
            @if isFile('html/img/' + $name + '.gif') == 'true' {
                background: image-url($name + '.gif');
            }
        }
    }
}
</pre></div></div>

<h3>
<span id="css" class="fragment"></span><a href="#css"><i class="fa fa-link"></i></a>CSS</h3>

<div class="code-frame" data-lang="text"><div class="highlight"><pre>ol li {
    text-indent: -9999px;
}
ol li:nth-child(1) {
    background: url('/html/img/img1.gif?1394796721');
}
ol li:nth-child(2) {
    background: url('/html/img/img2.gif?1394796721');
}
ol li:nth-child(3) {
    background: url('/html/img/img3.gif?1394796721');
}
ol li:nth-child(4) {
    background: url('/html/img/img4.gif?1394796721');
}
ol li:nth-child(5) {
    background: url('/html/img/img5.gif?1394796721');
}
</pre></div></div>
]]></content>
        <published>2014-05-17T17:32:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[HTML講座] ID・クラスの指定]]></title>
        <id>9WDB0txcfl2q72GhoeOtX</id>
        <link href="https://clover.blue/doc/9WDB0txcfl2q72GhoeOtX">
        </link>
        <updated>2019-08-28T01:47:50.000Z</updated>
        <content type="html"><![CDATA[<p>クラス名には様々な付け方があります。</p>
<p><a href="https://qiita.com/J_Sugar__/items/9adee163028c9910fbc6">SMACSS+BEMによるテーマ設計（for Drupal8）</a></p>
<p>何が正解というものはないですが、抑えておきたい考え方があります。</p>
<p>それはスタイルを当てるときのことを考えて、「コンポーネント単位」でクラスをつけることです。</p>
<p><a href="https://codepen.io/kame/pen/ZdJLzp">https://codepen.io/kame/pen/ZdJLzp</a></p>
<pre><code>&lt;header id=&quot;header&quot;&gt;
    &lt;h1 class=&quot;main-title&quot;&gt;タイトル&lt;/h1&gt;
    &lt;nav class=&quot;gnav&quot;&gt;
      &lt;ul&gt;
        &lt;li class=&quot;gnav-item&quot;&gt;&lt;a href=&quot;&quot;&gt;メニュー1&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;gnav-item&quot;&gt;&lt;a href=&quot;&quot;&gt;メニュー2&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;gnav-item&quot;&gt;&lt;a href=&quot;&quot;&gt;メニュー3&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
&lt;/header&gt;

&lt;main id=&quot;main&quot;&gt;
    &lt;article id=&quot;main-content&quot;&gt;
        &lt;h2 class=&quot;main-title&quot;&gt;タイトル&lt;/h2&gt;
        &lt;p class=&quot;main-description&quot;&gt;このサイトについての説明文&lt;/p&gt;

        &lt;section class=&quot;item&quot; id=&quot;about&quot;&gt;
            &lt;h3 class=&quot;item-title&quot;&gt;このサイトについて&lt;/h3&gt;
            &lt;p&gt;HTMLや、CSSについての勉強を目的としたページ&lt;p&gt;
            &lt;section class=&quot;about-item&quot;&gt;
              &lt;h4 class=&quot;about-item-title&quot;&gt;HTML&lt;/h4&gt;
              &lt;p&gt;HTMLで最低限必要な部分の説明&lt;/p&gt;
            &lt;/section&gt;

            &lt;section class=&quot;about-item&quot;&gt;
              &lt;h4 class=&quot;about-item-title&quot;&gt;CSS&lt;/h4&gt;
              &lt;p&gt;CSSでよく使う部分の説明&lt;/p&gt;
            &lt;/section&gt;
        &lt;/section&gt;

        &lt;section class=&quot;item&quot; id=&quot;html&quot;&gt;
            &lt;h3 class=&quot;item-title&quot;&gt;HTMLの勉強法&lt;/h3&gt;
            &lt;p&gt;HTMLで大事なのはその言葉が表しているものを意味付けすることが大事です。&lt;/p&gt;
            &lt;p&gt;見た目を調整するのはCSSに任せましょう。&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;見出し&lt;/strong&gt;、&lt;strong&gt;文章&lt;/strong&gt;、&lt;strong&gt;リスト&lt;/strong&gt;などの意味付けをするマークアップを心がけましょう。&lt;/p&gt;
        &lt;/section&gt;

        &lt;section class=&quot;item&quot; id=&quot;css&quot;&gt;
            &lt;h3 class=&quot;item-title&quot;&gt;CSSの勉強法&lt;/h3&gt;
            &lt;p&gt;HTMLでマークアップした要素に対してデザインをあてます。&lt;/p&gt;
        &lt;/section&gt;
    &lt;/article&gt;
&lt;/main&gt;

&lt;footer id=&quot;footer&quot;&gt;
    &lt;p class=&quot;copyright&quot;&gt;&lt;small&gt;&amp;copy; copyright kamem&lt;/small&gt;&lt;/p&gt;
&lt;/footer&gt;</code></pre><p>このように、下記のようなコンポーネントに分けて考えクラスをつけています。</p>
<ul>
<li>header</li>
<li>main-title</li>
<li>gnav</li>
<li>gnav-item</li>
</ul>
<ul>
<li>main</li>
<li>main-content</li>
<li>main-title</li>
<li>main-description</li>
</ul>
<ul>
<li>item</li>
<li>item-title</li>
</ul>
<ul>
<li>about-item</li>
<li>about-item-title</li>
</ul>
<ul>
<li>footer</li>
<li>copyright</li>
</ul>
<p>スタイルはコンポーネント単位で考え、
その外側に影響しないように考えて組んでいきましょう。</p>
]]></content>
        <published>2019-06-25T09:38:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 8. 連想配列（Object）]]></title>
        <id>emdgxYfxmTWOGK2YC3Bxu</id>
        <link href="https://clover.blue/doc/emdgxYfxmTWOGK2YC3Bxu">
        </link>
        <updated>2019-07-28T16:51:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="連想配列の宣言">連想配列の宣言</h2>
<pre><code>const empty= {};
const fruits = {
  red: &#39;りんご&#39;,
  orange: &#39;みかん&#39;,
  yellow: &#39;バナナ&#39;
};</code></pre><p>※ 左側のred, orange, yellowの部分を添字といいます。</p>
<h3 id="連想配列の取り出し方">連想配列の取り出し方</h3>
<ol>
<li>変数名.添字</li>
<li>変数名[&#39;添字&#39;]  </li>
</ol>
<p>※ 2だと添字部分を変数にできるので 、うまい具合に使い分けましょう。</p>
<h4 id="例">例</h4>
<pre><code>console.log(fruits.red); // りんご
console.log(fruits[&#39;orange&#39;]); // みかん

const color = &#39;yellow&#39;
console.log(fruits[color]); // バナナ</code></pre><h2 id="連想配列と多次元配列を使って整理">連想配列と多次元配列を使って整理</h2>
<pre><code>const fruits = {
  red: [&#39;りんご&#39;, &#39;さくらんぼ&#39;, &#39;いちご&#39;], // 赤い果物
  orange: [&#39;かき&#39;, &#39;みかん&#39;, &#39;びわ&#39;], // オレンジ色果物
  yellow: [&#39;バナナ&#39;, &#39;パイナップル&#39;, &#39;レモン&#39;] // 黄色い果物
};</code></pre><h3 id="取り出し方">取り出し方</h3>
<pre><code>console.log(fruits.red[0]); // りんご
console.log(fruits\[&#39;orange&#39;\][1]); // みかん

const color = &#39;yellow&#39;
console.log(fruits\[color\][0]); // バナナ</code></pre><p><a href="https://codepen.io/kame/pen/VoPwVE">[デモ]連想配列（Object）</a></p>
]]></content>
        <published>2018-08-22T10:33:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 7. 配列（Array）]]></title>
        <id>3U8F9TS6WdMfpy4rCXf7g</id>
        <link href="https://clover.blue/doc/3U8F9TS6WdMfpy4rCXf7g">
        </link>
        <updated>2019-07-28T16:28:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="配列の宣言">配列の宣言</h2>
<pre><code>const empty = [] //配列を空で定義
const fruits = [&#39;りんご&#39;, &#39;バナナ&#39;, &#39;パイナップル&#39;, &#39;ぶどう&#39;, &#39;すいか&#39;, &#39;めろん&#39;];</code></pre><h2 id="多次元配列">多次元配列</h2>
<pre><code>const fruits = [
  [&#39;りんご&#39;,&#39;さくらんぼ&#39;,&#39;いちご&#39;], // 赤い果物
  [&#39;かき&#39;,&#39;みかん&#39;,&#39;びわ&#39;], // オレンジ色果物
  [&#39;バナナ&#39;,&#39;パイナップル&#39;,&#39;レモン&#39;] // 黄色い果物
];</code></pre><h3 id="配列の取り出し方">配列の取り出し方</h3>
<p>変数名[配列番号]<br>※最初の配列を0番目として数えていくことに注意。</p>
<h4 id="例">例</h4>
<pre><code>console.log(fruits[0]); // りんご
console.log(fruits[1]); // バナナ
console.log(fruits[2]); // パイナップル
console.log(fruits[3]); // ぶどう
console.log(fruits[4]); // すいか
console.log(fruits[5]); // めろん</code></pre><h3 id="多次元配列の取り出し方">多次元配列の取り出し方</h3>
<p>変数名[配列番号][配列番号]<br>※最初の配列を0番目として数えていくことに注意。</p>
<h4 id="例-1">例</h4>
<p>console.log(fruits[0][0]); // りんご</p>
<p>console.log(fruits[1][1]); // みかん</p>
<p>console.log(fruits[2][0]); // バナナ</p>
<p><a href="https://codepen.io/kame/pen/KOaKpP">[デモ]配列（Array）</a></p>
]]></content>
        <published>2018-08-22T10:10:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 6. 文字列（String）の操作]]></title>
        <id>hH5crayIvw3jxLHziXc94</id>
        <link href="https://clover.blue/doc/hH5crayIvw3jxLHziXc94">
        </link>
        <updated>2019-07-28T15:57:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="文字列の長さ">文字列の長さ</h2>
<pre><code>&#39;文字列&#39;.length</code></pre><h3 id="例">例</h3>
<pre><code>const name = &#39;kame&#39;;
console.log(&#39;あなたの名前は&#39; + name.length + &#39;文字です。&#39;);

// 出力結果 : あなたの名前は4文字です。</code></pre><h2 id="文字列の部分取り出し">文字列の部分取り出し</h2>
<h3 id="1文字取り出す">1文字取り出す</h3>
<pre><code>&#39;文字列&#39;.charAt(n)</code></pre><p>文字列のn番目文字を返します。<br>※ 最初の文字を0番目として数えていくことに注意。</p>
<h3 id="複数の文字を取り出す">複数の文字を取り出す</h3>
<pre><code>&#39;文字列&#39;.slice(from, to)</code></pre><p>文字列のfrom番目からto番目までの文字列を返す。<br>※ toを省略した場合は残り全て</p>
<h2 id="文字列を分割し配列にする">文字列を分割し配列にする</h2>
<pre><code>&#39;文字列&#39;.split(sep, limit)</code></pre><p>文字列を sep を区切り文字として分割し、その配列を返します。<br>limit は配列の個数を制限します。</p>
<h3 id="例-1">例</h3>
<pre><code>const date = &#39;2013/4/26&#39;;
console.log(date.split(&#39;/&#39;));

//出力結果 : [&quot;2013&quot;, &quot;4&quot;, &quot;26&quot;]</code></pre><p>配列については下記を見てください。</p>
<p><a href="http://clover.blue/doc/3U8F9TS6WdMfpy4rCXf7g">[JS講座] 7. 配列（Array）</a></p>
<h2 id="文字列を検索・置換する">文字列を検索・置換する</h2>
<h3 id="文字列の検索した位置を返す">文字列の検索した位置を返す</h3>
<pre><code>&#39;文字列&#39;.indexOf(key, form)</code></pre><p>文字列のfrom番目から後方に検索し、最初に key が現れる位置を返します。<br>見つからない場合は-1を返します。<br>※ formを省略した場合は0番目から検索</p>
<h4 id="例-2">例</h4>
<pre><code>&#39;文字列&#39;.indexOf(&#39;文&#39;) // 0</code></pre><h3 id="文字列の置換">文字列の置換</h3>
<pre><code>&#39;文字列&#39;.replace(key,newString)</code></pre><p>文字列内の key をnewStringに置換する。</p>
<h4 id="例-3">例</h4>
<pre><code>&#39;文字列&#39;.replace(&#39;文字&#39;, &#39;A&#39;) // A列</code></pre><p><a href="https://codepen.io/kame/pen/ZgLzNY">[デモ]文字列（String）の操作</a></p>
]]></content>
        <published>2018-08-22T09:23:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 5. 何がtrue? false?]]></title>
        <id>yNvDC1HEDcnbDj0MpvDea</id>
        <link href="https://clover.blue/doc/yNvDC1HEDcnbDj0MpvDea">
        </link>
        <updated>2019-07-28T15:42:17.000Z</updated>
        <content type="html"><![CDATA[<p>基本的な考え方として、存在するものが<code>true</code>、存在しないものが <code>false</code></p>
<h2 id="trueになる">trueになる</h2>
<ul>
<li>true</li>
<li>1</li>
<li>-1</li>
<li>&#39;0&#39;</li>
<li>&#39;1&#39;</li>
</ul>
<h2 id="falseになる">falseになる</h2>
<ul>
<li>false</li>
<li>0</li>
<li>‘’ （空文字）</li>
<li>null</li>
<li>undefined</li>
</ul>
<p><a href="https://codepen.io/kame/pen/mNRbaX">[デモ]何がtrue? false?</a></p>
]]></content>
        <published>2018-08-22T10:03:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 4. 条件分岐・繰り返し（if文, for文）]]></title>
        <id>u9rlNkmIhzl9MPKjUmO4R</id>
        <link href="https://clover.blue/doc/u9rlNkmIhzl9MPKjUmO4R">
        </link>
        <updated>2019-07-28T15:36:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="条件分岐">条件分岐</h2>
<h3 id="if文">if文</h3>
<pre><code>if(条件) {
  console.log(処理...)
}</code></pre><h4 id="例">例</h4>
<pre><code>const num = 10
if(num === 10) {
  console.log(&#39;numは10です&#39;)
}</code></pre><h3 id="switch文">switch文</h3>
<pre><code>switch(変数) {
  case &#39;値1&#39;:
    処理
    break;
  case &#39;値2&#39;:
    処理
    break
  default:
    処理3
    break;
}</code></pre><h4 id="例-1">例</h4>
<pre><code>const color = &#39;red&#39;
switch(color) {
  case &#39;red&#39;:
    console.log(&#39;赤です&#39;)
    break;
  case &#39;blue&#39;:
    console.log(&#39;青です&#39;)
    break
  default:
    console.log(&#39;それ以外の色です&#39;)
    break;
}</code></pre><p><a href="https://codepen.io/kame/pen/JgbzVZ">[デモ]if文とswitch文</a></p>
<h2 id="繰り返し">繰り返し</h2>
<h3 id="for文">for文</h3>
<pre><code>for(初期化式; 条件式; 変化式) {
  処理
}</code></pre><h4 id="例-2">例</h4>
<pre><code>for(let i = 0; i &lt; 10; i++) {
  console.log(i)
}

// 式を2つ定義することもできます。
for(let i = 0, j = 10; i &lt; 10, j &gt; 0; i++,j--) {
  console.log(i, j)
}

//出力結果 : 0 1 2 3 4 5 6 7 8 9</code></pre><p><a href="https://codepen.io/kame/pen/vogBze">[デモ]for文</a></p>
]]></content>
        <published>2018-08-22T07:02:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 3. 型]]></title>
        <id>fvY0kqV9cEQqbCirAwhEw</id>
        <link href="https://clover.blue/doc/fvY0kqV9cEQqbCirAwhEw">
        </link>
        <updated>2019-07-28T05:13:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="型の種類">型の種類</h2>
<h3 id="文字列（string）">文字列（String）</h3>
<pre><code>const str = &#39;こんばんは&#39;;
const str2 = &quot;test&quot;;
const numStr = &#39;0&#39;;</code></pre><h4 id="補足">補足</h4>
<p>シングルクオートで囲まれてる文字列内でシングルクオートを使いたい場合: <code>&#39;\&#39;&#39;</code><br>同様にダブルクオートで囲まれてる文字列内でダブルクオートを使いたい場合 : <code>&quot;\&quot;&quot;</code> </p>
<p>シングルクオート<code>&#39;</code>、ダブルクオート<code>&quot;</code>どちらも使えますがシングルクオート推奨です。
HTMLでダブルクオートを使うため、区分けをつけるためです。</p>
<p><a href="https://codepen.io/kame/pen/XvNoZx">[デモ]型について</a></p>
<h3 id="数値（number）">数値（Number）</h3>
<pre><code>const num = 0;
const num2 = 1;</code></pre><h3 id="論理値（boolean）">論理値（Boolean）</h3>
<pre><code>const bool = true;
const bool2 = false;</code></pre><h3 id="配列（array）">配列（Array）</h3>
<pre><code>const ary = [1, 2, 3];</code></pre><h3 id="連想配列（object）">連想配列（Object）</h3>
<pre><code>const obj = {one: 1, two: 2};</code></pre><h2 id="型の変換">型の変換</h2>
<table>
<thead>
<tr>
<th>説明</th>
<th>コード</th>
</tr>
</thead>
<tbody><tr>
<td>文字列への変換</td>
<td><code>(&#39;こんにちは&#39;).toString();</code></td>
</tr>
<tr>
<td>数字に変換</td>
<td><code>parseInt(&#39;10&#39;);</code></td>
</tr>
<tr>
<td>論理型に変換</td>
<td><code>Boolean(true);</code></td>
</tr>
</tbody></table>
<h4 id="例">例</h4>
<pre><code>(10).toString() + 10; //1010
parseInt(&#39;10&#39;) + 10; //20</code></pre><p><a href="https://codepen.io/kame/pen/xvRmje">[デモ]型の変換</a></p>
]]></content>
        <published>2018-08-22T05:12:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 1. 変数・計算]]></title>
        <id>tzU6vsD7S2Dg21owgsnv7</id>
        <link href="https://clover.blue/doc/tzU6vsD7S2Dg21owgsnv7">
        </link>
        <updated>2019-07-28T04:35:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="変数の定義">変数の定義</h2>
<pre><code>var 変数名 = 初期値;
const 変数名 = 初期値; // 再代入できない
let 変数名 = 初期値; // 再代入可能</code></pre><p>基本的にはconstを使いましょう。
どうしても再代入の必要がある場合はletを使いましょう。</p>
<p><a href="https://codepen.io/kame/pen/wVoRzW">[デモ]変数の定義</a></p>
<h2 id="演算子">演算子</h2>
<table>
<thead>
<tr>
<th>式</th>
<th>説明</th>
</tr>
</thead>
<tbody><tr>
<td><code>+</code></td>
<td>足し算</td>
</tr>
<tr>
<td><code>-</code></td>
<td>引き算</td>
</tr>
<tr>
<td><code>*</code></td>
<td>掛け算</td>
</tr>
<tr>
<td><code>/</code></td>
<td>割り算</td>
</tr>
<tr>
<td><code>%</code></td>
<td>余り</td>
</tr>
</tbody></table>
<h2 id="代入演算子">代入演算子</h2>
<table>
<thead>
<tr>
<th>式</th>
<th>説明</th>
</tr>
</thead>
<tbody><tr>
<td><code>a = b;</code></td>
<td>a に b を代入</td>
</tr>
<tr>
<td><code>a += b;</code></td>
<td><code>a = a + b</code></td>
</tr>
<tr>
<td><code>a -= b;</code></td>
<td><code>a = a - b</code></td>
</tr>
<tr>
<td><code>a *= b;</code></td>
<td><code>a = a * b</code></td>
</tr>
</tbody></table>
<h3 id="i-に1を足す・引く">i に1を足す・引く</h3>
<table>
<thead>
<tr>
<th>式</th>
<th>説明</th>
</tr>
</thead>
<tbody><tr>
<td><code>a++</code></td>
<td><code>a = a + 1</code></td>
</tr>
<tr>
<td><code>++a</code></td>
<td><code>a = a + 1</code></td>
</tr>
<tr>
<td><code>a--</code></td>
<td><code>a = a - 1</code></td>
</tr>
<tr>
<td><code>--a</code></td>
<td><code>a = a - 1</code></td>
</tr>
</tbody></table>
<h2 id="演算子の優先順位">演算子の優先順位</h2>
<p>数学の考え方と一緒。</p>
<ol>
<li><code>()</code></li>
<li><code>* / %</code></li>
<li><code>+ -</code></li>
</ol>
<p><a href="https://codepen.io/kame/pen/aeBPpR">[デモ]演算子</a></p>
]]></content>
        <published>2018-08-22T02:46:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 0. 出力・コメント]]></title>
        <id>k8k1STBpbnDvA38NynAG8</id>
        <link href="https://clover.blue/doc/k8k1STBpbnDvA38NynAG8">
        </link>
        <updated>2019-07-28T03:24:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="値の出力">値の出力</h2>
<pre><code>console.log(10);</code></pre><h2 id="jsのコメントの書き方">jsのコメントの書き方</h2>
<pre><code>// 一行コメント
/*
複数行コメント
複数行コメント
*/</code></pre><p><a href="https://codepen.io/kame/pen/bXBQOd">[デモ]出力・コメント</a></p>
]]></content>
        <published>2018-08-22T06:20:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 13. タグの取得とイベントハンドラ]]></title>
        <id>YXRgUhh5ZI3E0YG6wlnzP</id>
        <link href="https://clover.blue/doc/YXRgUhh5ZI3E0YG6wlnzP">
        </link>
        <updated>2019-07-28T03:11:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="タグの取得">タグの取得</h2>
<pre><code>document.querySelectorAll(&#39;p&#39;)</code></pre><p>例 CSSのような指定でタグを取得することができます</p>
<pre><code>const header = document.querySelectorAll(&#39;#header&#39;)
const item = document.querySelectorAll(&#39;section.item&#39;)</code></pre><p>ページに存在するそのタグが全て入った配列として返ってきます。</p>
<h2 id="タグにイベントを設定する">タグにイベントを設定する</h2>
<pre><code>el.addEventListener(&#39;click&#39;, function);</code></pre><h3 id="例">例</h3>
<pre><code>const el = document.querySelectorAll(&#39;h1&#39;)
el[0].addEventListener(&#39;click&#39;, clickEvent);

function clickEvent() {
  // クリック時の処理
}</code></pre><p><code>click</code>部分に入るコードはいくつかあります<br>使用用途が多いものを下記に書きました</p>
<p><a href="https://codepen.io/kame/pen/aeBQbp">[デモ] タグの取得とイベントの設定</a></p>
<h3 id="マウス">マウス</h3>
<table>
<thead>
<tr>
<th>イベント</th>
<th>タイミング</th>
</tr>
</thead>
<tbody><tr>
<td>click</td>
<td>クリックしたとき</td>
</tr>
<tr>
<td>scroll</td>
<td>ウィンドウをスクロールをしたとき</td>
</tr>
<tr>
<td>resize</td>
<td>ウィンドウをリサイズしたとき</td>
</tr>
</tbody></table>
<h3 id="キー">キー</h3>
<table>
<thead>
<tr>
<th>イベント</th>
<th>タイミング</th>
</tr>
</thead>
<tbody><tr>
<td>keydown</td>
<td>キーを押したとき</td>
</tr>
<tr>
<td>keypress</td>
<td>キーが押されているとき</td>
</tr>
<tr>
<td>keyup</td>
<td>キーを離したとき</td>
</tr>
</tbody></table>
<h3 id="フォーム">フォーム</h3>
<table>
<thead>
<tr>
<th>イベント</th>
<th>タイミング</th>
</tr>
</thead>
<tbody><tr>
<td>blur</td>
<td>フォーカスが外れたとき</td>
</tr>
<tr>
<td>focus</td>
<td>フォーカスされたとき</td>
</tr>
</tbody></table>
<h3 id="フォーカス">フォーカス</h3>
<table>
<thead>
<tr>
<th>イベント</th>
<th>タイミング</th>
</tr>
</thead>
<tbody><tr>
<td>change</td>
<td>inputの値を変更したとき</td>
</tr>
</tbody></table>
<h3 id="ウィンドウ">ウィンドウ</h3>
<table>
<thead>
<tr>
<th>イベント</th>
<th>タイミング</th>
</tr>
</thead>
<tbody><tr>
<td>scroll</td>
<td>ウィンドウをスクロールをしたとき</td>
</tr>
<tr>
<td>resize</td>
<td>ウィンドウをリサイズしたとき</td>
</tr>
</tbody></table>
]]></content>
        <published>2018-09-10T08:45:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 12. 数学関数（Math）で演算]]></title>
        <id>GK6BWu10h3E3mT75KOJp5</id>
        <link href="https://clover.blue/doc/GK6BWu10h3E3mT75KOJp5">
        </link>
        <updated>2019-07-28T03:11:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0以上1未満の乱数を返す">0以上1未満の乱数を返す</h2>
<pre><code>Math.random();</code></pre><h3 id="例">例</h3>
<pre><code>console.log(Math.random());

/*
表示結果
0.40883730142377317のような乱数
*/</code></pre><h2 id="引数の中から一番大きな値を返す">引数の中から一番大きな値を返す</h2>
<pre><code>Math.max();</code></pre><h3 id="例-1">例</h3>
<pre><code>console.log(Math.max(1, 2, 3, 6, 4, 5));

/*
表示結果
6
*/</code></pre><h2 id="引数の中から一番小さな値を返す">引数の中から一番小さな値を返す</h2>
<pre><code>Math.min();</code></pre><h3 id="例-2">例</h3>
<pre><code>console.log(Math.min(1, 2, 3, 6, 4, 5));

/*
表示結果
1
*/</code></pre><h2 id="小数点以下を切り捨てた整数を返す">小数点以下を切り捨てた整数を返す</h2>
<pre><code>Math.floor(1.1);</code></pre><h3 id="例-3">例</h3>
<pre><code>console.log(Math.floor(Math.random() * 3));

/*
表示結果
整数 0 〜 2
*/</code></pre><h2 id="小数点以下を繰り上げした整数を返す">小数点以下を繰り上げした整数を返す</h2>
<pre><code>Math.ceil(0.1);</code></pre><h3 id="例-4">例</h3>
<pre><code>console.log(Math.ceil(Math.random() * 3));

/*
表示結果
整数 1 〜 3
*/</code></pre><h2 id="小数点以下を四捨五入した整数を返す">小数点以下を四捨五入した整数を返す</h2>
<pre><code>Math.round(0.1);</code></pre><h3 id="例-5">例</h3>
<pre><code>console.log(Math.round(Math.random() * 3));

/*
表示結果
整数 0 〜 3
*/</code></pre>]]></content>
        <published>2018-08-23T03:08:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 11. 関数（function）について]]></title>
        <id>eYAaw8GvNx1Gcwp5xjyYh</id>
        <link href="https://clover.blue/doc/eYAaw8GvNx1Gcwp5xjyYh">
        </link>
        <updated>2019-07-28T03:10:15.000Z</updated>
        <content type="html"><![CDATA[<p>関数とは、プログラムを別な場所からいつでも呼び出して利用できるように、処理をひとまとめにしたものです。</p>
<pre><code>function test(引数1,引数2, ...){
  console.log(&#39;処理&#39;);
}</code></pre><h2 id="引数">引数</h2>
<p>関数の外から関数が実行される際に値を渡すことで、<br>関数内で使える変数となります。</p>
<ul>
<li>引数は複数指定可能</li>
<li>引数は入れなくてもよい</li>
</ul>
<h3 id="例">例</h3>
<pre><code>function formula(a, b){
  console.log(a + b);
}

formula(10, 100);
formula(1000, 150);

/*
表示結果
110
1150
*/</code></pre><h3 id="戻り値-（return）">戻り値 （return）</h3>
<p>returnを使うことで呼び出し元に値を返すことができます。</p>
<pre><code>function formula(a, b){
  return a + b;
}

console.log(formula(10, 100));
console.log(formula(1000, 150));

/*
表示結果
110
1150
*/</code></pre><h3 id="応用例">応用例</h3>
<h4 id="指定の数が入った配列をreturnをつかって返す関数">指定の数が入った配列をreturnをつかって返す関数</h4>
<pre><code>function numArray(num){
  //この変数は「numArray関数」内でしか使えない変数です（ローカル変数）
  const array = [];

  for(var i = 0; i &lt; num; i++) {
    array[i] = i;
  }

  return array;
}

console.log(numArray(100));

//arrayが「numArray関数」外で定義（グローバル変数）されてないのでここでエラーになります。
console.log(array);

/*
表示結果
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ...]
*/</code></pre>]]></content>
        <published>2018-08-23T03:06:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 10. 連想配列の繰り返し（for..in文）]]></title>
        <id>kkJU3gO9jd4soJPX6Mura</id>
        <link href="https://clover.blue/doc/kkJU3gO9jd4soJPX6Mura">
        </link>
        <updated>2019-07-28T03:09:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="forin文">for..in文</h2>
<pre><code>for(const color in {red: &#39;赤&#39;, blue: &#39;青&#39; }) {
  console.log(color);
};</code></pre><h3 id="例">例</h3>
<pre><code>const fruitsObj = {
  red : [&#39;りんご&#39;,&#39;さくらんぼ&#39;,&#39;いちご&#39;],
  orange : [&#39;かき&#39;,&#39;みかん&#39;,&#39;びわ&#39;],
  yellow : [&#39;バナナ&#39;,&#39;パイナップル&#39;,&#39;レモン&#39;]
};


for(var fruit in fruitsObj ) {
  console.log(fruit);
  console.log(fruitsObj[fruit])
}

/*
表示結果
red
[&quot;りんご&quot;, &quot;さくらんぼ&quot;, &quot;いちご&quot;]
orange
[&quot;かき&quot;, &quot;みかん&quot;, &quot;びわ&quot;]
yellow
[&quot;バナナ&quot;, &quot;パイナップル&quot;, &quot;レモン&quot;]
*/</code></pre>]]></content>
        <published>2018-08-23T02:05:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 9. 配列（Array）の操作]]></title>
        <id>OK1ZSXJe56UlNPHoXLj9M</id>
        <link href="https://clover.blue/doc/OK1ZSXJe56UlNPHoXLj9M">
        </link>
        <updated>2019-07-28T03:07:48.000Z</updated>
        <content type="html"><![CDATA[<h2 id="配列の長さ">配列の長さ</h2>
<pre><code>([1, 2, 3]).length // 3</code></pre><h3 id="例">例</h3>
<pre><code>const fruits  = [&#39;りんご&#39;,&#39;バナナ&#39;,&#39;パイナップル&#39;,&#39;ぶどう&#39;,&#39;すいか&#39;,&#39;めろん&#39;];
console.log(&#39;果物が&#39; + fruits.length + &#39;個&#39;);

// 出力結果 : 果物が6個</code></pre><h2 id="配列の連結">配列の連結</h2>
<pre><code>([1, 2]).concat([3, 4], [5, 6]);

// [1, 2, 3, 4, 5, 6]</code></pre><h3 id="例-1">例</h3>
<pre><code>const fruits = [&#39;りんご&#39;];
const fruits2 = [&#39;バナナ&#39;];
const fruits3 = [&#39;パイナップル&#39;];
const fruits4 =  [&#39;ぶどう&#39;];

fruits = fruits.concat(fruits2,fruits3,fruits4);

console.log(fruits);

// 出力結果 : [&quot;りんご&quot;, &quot;バナナ&quot;, &quot;パイナップル&quot;, &quot;ぶどう&quot;]</code></pre><h2 id="文字列として連結">文字列として連結</h2>
<pre><code>([1, 2, 3]).join(&#39;/&#39;);</code></pre><h3 id="例-2">例</h3>
<pre><code>const date = [2013, 4, 26];
console.log(date.join(&#39;/&#39;));

// 出力結果 : 2013/4/26</code></pre><h2 id="配列の追加・削除・取り出し">配列の追加・削除・取り出し</h2>
<h3 id="追加">追加</h3>
<h4 id="先頭に追加">先頭に追加</h4>
<pre><code>const test = [1, 2]
test.unshift(3, 4); // [3, 4, 1, 2]</code></pre><h4 id="最後に追加">最後に追加</h4>
<pre><code>const test = [1, 2]
test.push(3, 4); // [1, 2, 3, 4]</code></pre><h3 id="削除">削除</h3>
<h4 id="先頭を削除">先頭を削除</h4>
<pre><code>const test = [1, 2]
test.shift(); // [2]</code></pre><h4 id="最後を削除">最後を削除</h4>
<pre><code>const test = [1, 2]
test.pop(); // [1]</code></pre><h3 id="削除と追加">削除と追加</h3>
<pre><code>[&#39;a&#39;, &#39;b&#39;].splice(from,len,&#39;追加したい値1&#39;,&#39;追加したい値2&#39;);</code></pre><p>配列のfrom番目からlen個の要素を削除し、代わりにその後に続く値を埋め込みます。</p>
<h4 id="例-3">例</h4>
<pre><code>const fruits  = [&#39;りんご&#39;, &#39;バナナ&#39;, &#39;パイナップル&#39;, &#39;ぶどう&#39;, &#39;すいか&#39;, &#39;めろん&#39;];
fruits.splice(1, 2, &#39;追加したい値1&#39;, &#39;追加したい値2&#39;);

console.log(fruits);

//出力結果 : [&quot;りんご&quot;, &quot;追加したい値1&quot;, &quot;追加したい値2&quot;, &quot;ぶどう&quot;, &quot;すいか&quot;, &quot;めろん&quot;]</code></pre><h3 id="取り出し">取り出し</h3>
<pre><code>[&#39;a&#39;, &#39;b&#39;].slice(from,to);</code></pre><p>配列のfrom番目からto番目までの要素を抜き出した配列を返します。  </p>
<ul>
<li>toを省略した場合は残り全て  </li>
<li>負の値を指定すると後ろから数える。</li>
</ul>
<h4 id="例-4">例</h4>
<pre><code>const fruits  = [&#39;りんご&#39;, &#39;バナナ&#39;, &#39;パイナップル&#39;, &#39;ぶどう&#39;, &#39;すいか&#39;, &#39;めろん&#39;];
fruits = fruits.slice(1, 4);

console.log(fruits);

// 出力結果 : [&quot;バナナ&quot;, &quot;パイナップル&quot;, &quot;ぶどう&quot;] </code></pre><h2 id="列の並べ替え">列の並べ替え</h2>
<h3 id="配列をルールにそった配列を返す">配列をルールにそった配列を返す</h3>
<pre><code>([1, 2]).sort([func]（比較関数）);</code></pre><p>配列の要素を文字列表記の辞書順に並べ替える。<br>※ 比較関数を使い任意でルールを指定することができます。</p>
<h4 id="例-5">例</h4>
<pre><code>const numArray = [3, 7, 4, 1];
numArray.sort();

console.log(numArray);

// 出力結果 : [1, 3, 4, 7]</code></pre><h3 id="配列を逆順にする">配列を逆順にする</h3>
<pre><code>([1, 2]).reverse()</code></pre><h4 id="例-6">例</h4>
<pre><code>const fruits  = [&#39;りんご&#39;, &#39;バナナ&#39;, &#39;パイナップル&#39;, &#39;ぶどう&#39;, &#39;すいか&#39;, &#39;めろん&#39;];
fruits.reverse();

console.log(fruits);

// 出力結果 : [&quot;めろん&quot;, &quot;すいか&quot;, &quot;ぶどう&quot;, &quot;パイナップル&quot;, &quot;バナナ&quot;, &quot;りんご&quot;]</code></pre>]]></content>
        <published>2018-08-22T10:45:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 2. 演算子]]></title>
        <id>zbV7a9fK3CHLW3lZrhons</id>
        <link href="https://clover.blue/doc/zbV7a9fK3CHLW3lZrhons">
        </link>
        <updated>2019-07-28T02:43:48.000Z</updated>
        <content type="html"><![CDATA[<h2 id="論理演算子">論理演算子</h2>
<table>
<thead>
<tr>
<th>説明</th>
<th>コード</th>
<th><code>true</code>になる例</th>
</tr>
</thead>
<tbody><tr>
<td>aとbの値が等しいの場合 <code>true</code></td>
<td><code>a === b</code></td>
<td><code>10 === 10</code></td>
</tr>
<tr>
<td>aとbの値が等しくない場合 <code>true</code></td>
<td><code>a !== b</code></td>
<td><code>5 !== 10</code></td>
</tr>
<tr>
<td>a が b より大きい場合 <code>true</code></td>
<td><code>a &gt; b</code></td>
<td><code>5 &gt; 3</code></td>
</tr>
<tr>
<td>a が b より小さい場合 <code>true</code></td>
<td><code>a &lt; b</code></td>
<td><code>5 &lt; 10</code></td>
</tr>
<tr>
<td>a が b 以上の場合 <code>true</code></td>
<td><code>a &gt;= b</code></td>
<td><code>5 &gt;= 5</code></td>
</tr>
<tr>
<td>a が b 以下の場合 <code>true</code></td>
<td><code>a &lt;= b</code></td>
<td><code>5 &lt;= 5</code></td>
</tr>
</tbody></table>
<h2 id="論理演算子-1">論理演算子</h2>
<table>
<thead>
<tr>
<th>説明</th>
<th>コード</th>
<th><code>true</code>になる例</th>
</tr>
</thead>
<tbody><tr>
<td>aとb2つの式・値が正しい場合 <code>true</code></td>
<td><code>a &amp;&amp; b</code></td>
<td><code>true &amp;&amp; true</code></td>
</tr>
<tr>
<td>aとbのどちらか式・値が正しい場合 <code>true</code></td>
<td><code>a || b</code></td>
<td><code>false || true</code></td>
</tr>
<tr>
<td>値を反転する（aが正しくない場合 true、正しい場合はfalse）</td>
<td><code>!a</code></td>
<td><code>!(10 === 5)</code></td>
</tr>
</tbody></table>
<h3 id="例">例</h3>
<pre><code>const num = 10;
// numが3より大きいかつ、20より小さい値のためtrue
console.log(num &gt; 3 &amp;&amp; num &lt; 20)
// numが10もしくは20の場合trueなのでこの場合10 === 10がのためtrue
console.log(num === 10 || num === 20)
// numと10は等しく、それを反転しているためfalse
console.log(!(num === 10)) //false</code></pre>]]></content>
        <published>2018-08-22T05:42:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[CSS講座] 三角形の作り方]]></title>
        <id>b6LsIjObgAN0QI1CrInnL</id>
        <link href="https://clover.blue/doc/b6LsIjObgAN0QI1CrInnL">
        </link>
        <updated>2019-07-16T04:27:51.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://codepen.io/kame/pen/MMxMPx">https://codepen.io/kame/pen/MMxMPx</a></p>
]]></content>
        <published>2019-07-16T04:22:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[HTML講座] よくあるHTML構造]]></title>
        <id>Id7aunyBwrfDuNYEAut9b</id>
        <link href="https://clover.blue/doc/Id7aunyBwrfDuNYEAut9b">
        </link>
        <updated>2019-06-25T14:23:23.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>header, main, footerに分けて考える</li>
<li>アウトラインを考えて見出し、section or articleを決めていく</li>
</ol>
<p><a href="https://codepen.io/kame/pen/YoWPMX">https://codepen.io/kame/pen/YoWPMX</a></p>
<pre><code>&lt;header&gt;
    &lt;h1&gt;タイトル&lt;/h1&gt;
    &lt;nav&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;&quot;&gt;メニュー1&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;&quot;&gt;メニュー2&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;&quot;&gt;メニュー3&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
&lt;/header&gt;

&lt;main&gt;
    &lt;article&gt;
        &lt;h2&gt;タイトル&lt;/h2&gt;
        &lt;p&gt;このサイトについての説明文&lt;/p&gt;

        &lt;section&gt;
            &lt;h3&gt;このサイトについて&lt;/h3&gt;
            &lt;p&gt;HTMLや、CSSについての勉強を目的としたページ&lt;p&gt;
            &lt;section&gt;
              &lt;h4&gt;HTML&lt;/h4&gt;
              &lt;p&gt;HTMLで最低限必要な部分の説明&lt;/p&gt;
            &lt;/section&gt;

            &lt;section&gt;
              &lt;h4&gt;CSS&lt;/h4&gt;
              &lt;p&gt;CSSでよく使う部分の説明&lt;/p&gt;
            &lt;/section&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h3&gt;HTMLの勉強法&lt;/h3&gt;
            &lt;p&gt;HTMLで大事なのはその言葉が表しているものを意味付けすることが大事です。&lt;/p&gt;
            &lt;p&gt;見た目を調整するのはCSSに任せましょう。&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;見出し&lt;/strong&gt;、&lt;strong&gt;文章&lt;/strong&gt;、&lt;strong&gt;リスト&lt;/strong&gt;などの意味付けをするマークアップを心がけましょう。&lt;/p&gt;
            &lt;p&gt;&lt;a href=&quot;http://www.clover.blue/doc/lXvYL28hc8CBwvZiBpuEF&quot;&gt;[HTML講座] HTMLについて&lt;/a&gt;&lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;h3&gt;CSSの勉強法&lt;/h3&gt;
            &lt;p&gt;HTMLでマークアップした要素に対してデザインをあてます。&lt;/p&gt;
        &lt;/section&gt;
    &lt;/article&gt;
&lt;/main&gt;

&lt;footer&gt;
    &lt;p&gt;&lt;small&gt;&amp;copy; copyright kamem&lt;/small&gt;&lt;/p&gt;
&lt;/footer&gt;</code></pre>]]></content>
        <published>2019-06-17T13:05:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[CSS講座] 横並びの方法]]></title>
        <id>XgnZIcXha3lrBdcbpMTGu</id>
        <link href="https://clover.blue/doc/XgnZIcXha3lrBdcbpMTGu">
        </link>
        <updated>2019-06-20T02:41:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="flexboxを使う">flexboxを使う</h2>
<h3 id="html">HTML</h3>
<pre><code>&lt;ul class=&quot;nav&quot;&gt;
    &lt;li class=&quot;nav_item&quot;&gt;Menu1&lt;/li&gt;
    &lt;li class=&quot;nav_item&quot;&gt;Menu2&lt;/li&gt;
    &lt;li class=&quot;nav_item&quot;&gt;Menu3&lt;/li&gt;
    &lt;li class=&quot;nav_item&quot;&gt;Menu4&lt;/li&gt;
&lt;/ul&gt;</code></pre><h3 id="css">CSS</h3>
<pre><code>.nav {
    padding: 10px;
    display: flex;
    background-color: #333333;
    height: 100px;
    /* 縦のセンター寄せ */
    justify-content: center;
    /* 横のセンター寄せ */
    align-items: center;
}
.nav_item {
    list-style-type: none;
    background-color: #39c;
    text-align: center;
    border-right: 1px solid #fff;
    color: #fff;
    width: 100px;
}</code></pre><p><a href="https://codepen.io/kame/pen/jjbrMV">https://codepen.io/kame/pen/jjbrMV</a></p>
]]></content>
        <published>2019-06-13T16:25:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[HTML講座] HTMLについて]]></title>
        <id>lXvYL28hc8CBwvZiBpuEF</id>
        <link href="https://clover.blue/doc/lXvYL28hc8CBwvZiBpuEF">
        </link>
        <updated>2019-06-17T13:24:26.000Z</updated>
        <content type="html"><![CDATA[<p>HTMLはhyper text markup language（ハイパーテキストマークアップランゲージ）の略です。</p>
<p>HTMLで大事なのはその言葉が表しているものを意味付けすることが大事です。
見た目を調整するのはCSSに任せましょう。</p>
<ul>
<li>見出し</li>
<li>文章</li>
<li>リスト</li>
<li>文書構造</li>
</ul>
<p>などの意味付けをするマークアップを心がけましょう。</p>
<h2 id="hタグとは">hタグとは</h2>
<p>h1からh6まで見出しを表すタグ</p>
<h2 id="pとは">pとは</h2>
<p>文章、段落を表すタグ</p>
<pre><code>&lt;p&gt;文章文章文章文章文章&lt;/p&gt;</code></pre><h2 id="ulolliとは">ul,ol,liとは</h2>
<p>リストを表すタグ</p>
<h3 id="ul">ul</h3>
<p>順番が関係ないリスト</p>
<ul>
<li>リスト1</li>
<li>リスト2</li>
<li>リスト3</li>
</ul>
<pre><code>&lt;ul&gt;
  &lt;li&gt;リスト1&lt;/li&gt;
  &lt;li&gt;リスト2&lt;/li&gt;
  &lt;li&gt;リスト3&lt;/li&gt;
&lt;/ul&gt;</code></pre><h3 id="ol">ol</h3>
<p>順番つきのリスト</p>
<ol>
<li>リスト1</li>
<li>リスト2</li>
<li>リスト3</li>
</ol>
<pre><code>&lt;ol&gt;
  &lt;li&gt;リスト1&lt;/li&gt;
  &lt;li&gt;リスト3&lt;/li&gt;
&lt;/ol&gt;</code></pre><h2 id="dlとは">dlとは</h2>
<p>定義付きリスト</p>
<pre><code>&lt;dl&gt;
  &lt;dt&gt;タイトル1&lt;/dt&gt;
  &lt;dd&gt;タイトル1に対しての定義・説明&lt;/dd&gt;
  &lt;dt&gt;タイトル2&lt;/dt&gt;
  &lt;dd&gt;タイトル2に対しての定義・説明&lt;/dd&gt;
  &lt;dd&gt;タイトル2に対しての定義・説明 複数かける&lt;/dd&gt;
  &lt;dd&gt;タイトル2に対しての定義・説明 複数かける&lt;/dd&gt;
&lt;/dl&gt;</code></pre><h2 id="figurefigucaptionとは">figure,figucaptionとは</h2>
<p>写真や図などをいれるタグ</p>
<pre><code>&lt;figure&gt;
  &lt;img src=&quot;http://www.htmq.com/images/kaeru.gif&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;
  &lt;figucaption&gt;画像の説明&lt;/figucaption&gt;
&lt;/figure&gt;</code></pre><h2 id="em-strongとは">em, strongとは</h2>
<p>emが強調を表す
strongが強い重要性を表す</p>
<pre><code>&lt;p&gt;emは&lt;em&gt;強調&lt;/em&gt;を表す&lt;/p&gt;
&lt;p&gt;emは&lt;strong&gt;重要性&lt;/strong&gt;を表す&lt;/p&gt;</code></pre><h2 id="smallとは">smallとは</h2>
<p>責・警告・法的規制・著作権・ライセンス要件などの注釈や細目を表す際に使う</p>
<pre><code>&lt;p&gt;&lt;small&gt;&amp;copy; copyright&lt;/small&gt;&lt;/p&gt;</code></pre><h2 id=""></h2>
<h2 id="divspanとは">div,spanとは</h2>
<p>特に意味をもたないタグ</p>
<h3 id="div">div</h3>
<p>タグをグループ化したいときなどに使う</p>
<pre><code>&lt;div&gt;
  &lt;p&gt;文章&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;リスト1&lt;/li&gt;
    &lt;li&gt;リスト2&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</code></pre><h3 id="span">span</h3>
<p>divとは違い改行されない。
em、strongなどとは違い特に意味がないがデザイン的に囲う必要がある場合などに使う</p>
<pre><code>&lt;p&gt;&lt;span&gt;特に意味&lt;/span&gt;がないけど囲いたい&lt;/p&gt;</code></pre><h2 id="headermainfooterについて">header,main,footerについて</h2>
<h3 id="headerとは">headerとは</h3>
<p>ページのタイトルや、グローバルナビゲーションなど、ページのheaderとなる部分を囲う</p>
<pre><code>&lt;header&gt;
  &lt;h1&gt;タイトル&lt;/h1&gt;
&lt;/header&gt;</code></pre><h3 id="mainとは">mainとは</h3>
<p>ページのmainとなる部分を囲う</p>
<pre><code>&lt;main&gt;
  &lt;h2&gt;メインタイトル&lt;/h2&gt;
  &lt;p&gt;メインのコンテンツの内容&lt;/p&gt;
&lt;/main&gt;</code></pre><h3 id="footerとは">footerとは</h3>
<p>コピーライトなどページのfooterとなる部分を囲う</p>
<pre><code>&lt;footer&gt;
  &lt;p&gt;&lt;small&gt;&amp;copy; copyright kame&lt;/small&gt;&lt;/p&gt;
&lt;/footer&gt;</code></pre><h2 id="sectionarticleについて">section,articleについて</h2>
<h3 id="sectionとは">sectionとは</h3>
<p>見出しタグが表している範囲を囲う</p>
<pre><code>&lt;section&gt;
  &lt;h2&gt;section,articleについて&lt;/h2&gt;

  &lt;section&gt;
    &lt;h3&gt;sectionとは&lt;/h3&gt;
    &lt;p&gt;見出しタグが表している範囲を囲う&lt;/p&gt;
  &lt;/section&gt;
&lt;/section&gt;</code></pre><h3 id="articleについて">articleについて</h3>
<p>記事部分を囲う</p>
<pre><code>&lt;main&gt;
  &lt;article&gt;
    &lt;h1&gt;HTMLとは&lt;/h1&gt;

    &lt;section&gt;
      &lt;h2&gt;section,articleについて&lt;/h2&gt;

      &lt;section&gt;
        &lt;h3&gt;sectionとは&lt;/h3&gt;
        &lt;p&gt;見出しタグが表している範囲を囲う&lt;/p&gt;
      &lt;/section&gt;
    &lt;/section&gt;
  &lt;/article&gt;
&lt;/main&gt;</code></pre>]]></content>
        <published>2019-06-13T02:02:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[CSS講座] positionについて]]></title>
        <id>KaNjEMQYVsO7NfZYWcN1j</id>
        <link href="https://clover.blue/doc/KaNjEMQYVsO7NfZYWcN1j">
        </link>
        <updated>2019-06-14T13:20:02.000Z</updated>
        <content type="html"><![CDATA[<p>ボックスの配置の仕方の指定</p>
<h2 id="static">static</h2>
<p>何も指定されていない状態</p>
<pre><code>position: static;</code></pre><h2 id="relative">relative</h2>
<p>相対位置</p>
<pre><code>position: relative;</code></pre><h2 id="absolute">absolute</h2>
<p>絶対位置</p>
<ul>
<li>親を見ていきstatic以外だった要素からの起点になる</li>
<li>すべてstaticだった場合はbodyからの起点になる</li>
</ul>
<pre><code>position: absolute;</code></pre><h2 id="fixed">fixed</h2>
<p>固定</p>
<pre><code>position: fixed;</code></pre><p><a href="https://codepen.io/kame/pen/ewpjoK">https://codepen.io/kame/pen/ewpjoK</a></p>
]]></content>
        <published>2019-06-14T06:44:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS問題] 関数を作る問題]]></title>
        <id>I6Px9EHfvkC3FKmuZZgh6</id>
        <link href="https://clover.blue/doc/I6Px9EHfvkC3FKmuZZgh6">
        </link>
        <updated>2018-10-05T07:00:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="q1-引数に数字を入れ実行すると、0から引数で渡した数字までの「奇数・偶数で分けた連想配列」を戻り値（return）で返す関数を作る">Q1. 引数に数字を入れ実行すると、0から引数で渡した数字までの「奇数・偶数で分けた連想配列」を戻り値（return）で返す関数を作る</h2>
<pre><code>console.log(numObj(100));

/*
[結果]
{
  odd: [1, 3, 5, 7, ...99],
  even: [0, 2, 6, 8, ...100]
};
*/</code></pre><p>上記が成り立つようなnumObj関数を作りましょう。</p>
<h2 id="q2-第1引数に配列、第2引数に文字列を渡すと、-第1引数の配列の最後に第2引数で渡した文字列を追加すした配列を戻り値（return）で返す関数を作る">Q2 第1引数に配列、第2引数に文字列を渡すと、 第1引数の配列の最後に第2引数で渡した文字列を追加すした配列を戻り値（return）で返す関数を作る</h2>
<pre><code>var fruits = [&#39;りんご&#39;, &#39;めろん&#39;, &#39;ぶどう&#39;];

console.log(addFruit(fruits, &#39;すいか&#39;));

/*
[結果]
[&#39;りんご&#39;, &#39;めろん&#39;, &#39;ぶどう&#39;, &#39;すいか&#39;]
*/</code></pre><p>上記が成り立つようなaddFruit関数を作りましょう。</p>
<h2 id="q3-引数に数字を入れると、1からその引数までの乱数を戻り値（return）で返す関数を作る">Q3 引数に数字を入れると、1からその引数までの乱数を戻り値（return）で返す関数を作る</h2>
<pre><code>console.log(randomNum(10));

/*
[結果]
10までの乱数
*/</code></pre><p>上記が成り立つようなrandomNum関数を作りましょう。</p>
<h2 id="q4-引数にmin-maxのような-2つ数字を入れ、minからmaxまでの整数の乱数を戻り値（return）で返す関数を作る">Q4. 引数に(min, max)のような 2つ数字を入れ、minからmaxまでの整数の乱数を戻り値（return）で返す関数を作る</h2>
<pre><code>console.log(randomRangeNum(3, 10));

/*
[結果]
3 〜 10までの乱数
*/</code></pre><p>上記が成り立つようなrandomRangeNum関数を作りましょう。</p>
<h2 id="q5-引数に文字列を入れ、5文字以上の場合は、４文字までとし、以降をとする関数をつくる">Q5. 引数に文字列を入れ、5文字以上の場合は、４文字までとし、以降を…とする関数をつくる</h2>
<pre><code>/*
[結果]
4文字の場合そのまま、&quot;aaaa&quot; &gt; &quot;aaaa&quot;
5文字の場合、&quot;12345&quot; &gt; &quot;1234...&quot;
6文字の場合、&quot;123456&quot; &gt; &quot;1234...&quot;
*/</code></pre><h2 id="q6-引数に数字を渡すと、金額表記の文字列に変換して戻り値（return）で返す関数を作る">Q6. 引数に数字を渡すと、金額表記の文字列に変換して戻り値（return）で返す関数を作る</h2>
<pre><code>console.log(getMoneyFormat(1000000))

// [結果] 1,000,000</code></pre><p>上記が成り立つようなgetMoneyFormat関数を作りましょう。</p>
]]></content>
        <published>2018-08-23T06:05:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[アブブLineスタンプ作り中]]></title>
        <id>VAUy7XolOf8Jqgl19HpMj</id>
        <link href="https://clover.blue/doc/VAUy7XolOf8Jqgl19HpMj">
        </link>
        <updated>2018-09-23T10:40:12.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_8472BF34D6851EDAF2E828E8F30827AD707C1AD9598B33A3EFB84321E39DDF8C_1537117446870_abubu.gif" alt=""></p>
<p>昔身内の間で小学校の時に流行っていたキャラクターのスタンプを作りました！</p>
<p>[アブブ - LINE スタンプ | LINE STORE](<a href="https://store.line.me/stickershop/product/4738031">https://store.line.me/stickershop/product/4738031</a>)</p>
]]></content>
        <published>2018-09-16T17:02:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS講座] 基礎を覚えたそのあとの話]]></title>
        <id>IDWlqBOJ1PRYWKA3ybVCc</id>
        <link href="https://clover.blue/doc/IDWlqBOJ1PRYWKA3ybVCc">
        </link>
        <updated>2018-09-12T07:54:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基礎を理解したあとに勉強したいこと">基礎を理解したあとに勉強したいこと</h2>
<h3 id="ecmascript6を学ぶ">ECMAScript6を学ぶ</h3>
<ul>
<li>[ES6(ES2015)チートシート](<a href="https://qiita.com/morrr/items/883cb902ccda37e840bc">https://qiita.com/morrr/items/883cb902ccda37e840bc</a>)</li>
</ul>
<h3 id="タスクランナーを学ぶ">タスクランナーを学ぶ</h3>
<ul>
<li>[webpack 4 入門](<a href="https://qiita.com/soarflat/items/28bf799f7e0335b68186">https://qiita.com/soarflat/items/28bf799f7e0335b68186</a>)</li>
</ul>
<h3 id="jqueryの概要を掴む">jQueryの概要を掴む</h3>
<ul>
<li>[jQueryとは？jQueryの基本的な使い方まとめ【初心者向け】](<a href="https://handywebdesign.net/2017/09/jquery-for-beginner/">https://handywebdesign.net/2017/09/jquery-for-beginner/</a>)</li>
</ul>
<h3 id="lodashを使ってみる">lodashを使ってみる</h3>
<ul>
<li><a href="http://matsukaz.hatenablog.com/entry/2014/04/09/082410"><a href="http://matsukaz.hatenablog.com/entry/2014/04/09/082410">lodashでよく使う関数まとめ</a></a></li>
</ul>
<h3 id="フレームワークを使う">フレームワークを使う</h3>
<ul>
<li>[出来る限り短く説明するReact.js入門](<a href="https://qiita.com/rgbkids/items/8ec309d1bf5e203d2b19">https://qiita.com/rgbkids/items/8ec309d1bf5e203d2b19</a>)</li>
</ul>
<h3 id="オブジェクト指向を学ぶ">オブジェクト指向を学ぶ</h3>
<ul>
<li>[Javascriptのオブジェクト指向についての基本まとめ](<a href="https://qiita.com/katsunory/items/3b07b924280f18b11040">https://qiita.com/katsunory/items/3b07b924280f18b11040</a>)</li>
<li>[【全てのJSのオブジェクト指向嫌いマンに告ぐ】ES6のclass構文が素敵すぎて鼻水が止まらない](<a href="https://qiita.com/yas-nyan/items/3783ad8839072022ad97">https://qiita.com/yas-nyan/items/3783ad8839072022ad97</a>)</li>
</ul>
<h3 id="関数について">関数について</h3>
<ul>
<li>[【JavaScript】即時関数, 無名関数, クロージャについて](<a href="https://qiita.com/To_BB/items/bf4d6384f7dce47bb216">https://qiita.com/To_BB/items/bf4d6384f7dce47bb216</a>)</li>
</ul>
]]></content>
        <published>2018-08-23T10:27:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS問題] 配列、連想配列を使った問題]]></title>
        <id>t6CJar2C8SOKx6yDWXpkL</id>
        <link href="https://clover.blue/doc/t6CJar2C8SOKx6yDWXpkL">
        </link>
        <updated>2018-09-07T02:03:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="q1-配列に0〜50、50〜0の配列を入れてそれぞれ表示。">Q1. 配列に0〜50、50〜0の配列を入れてそれぞれ表示。</h2>
<p>for文を使ってください</p>
<pre><code>// \[結果\] [1, 2, 3, ...]
// \[結果\] [50, 49, 48, ...]</code></pre><h2 id="q2-下記の果物が入った配列を、一つづつ表示。">Q2. 下記の果物が入った配列を、一つづつ表示。</h2>
<pre><code>var fruits  = [&#39;りんご&#39;, &#39;バナナ&#39;, &#39;パイナップル&#39;, &#39;ぶどう&#39;, &#39;すいか&#39;, &#39;めろん&#39;];

/*
[結果]
りんご
バナナ
パイナップル
ぶどう
すいか
めろん
*/</code></pre><h2 id="q3-下記の連想配列を、下記の結果になるように表示。">Q3. 下記の連想配列を、下記の結果になるように表示。</h2>
<pre><code>var fruits = {
  red : [&#39;りんご&#39;, &#39;さくらんぼ&#39;, &#39;いちご&#39;],
  orange : [&#39;かき&#39;, &#39;みかん&#39;, &#39;びわ&#39;],
  yellow : [&#39;バナナ&#39;, &#39;パイナップル&#39;, &#39;レモン&#39;]
};

/*
[結果]
red(りんご・さくらんぼ・いちご)
orange(かき・みかん・びわ)
yellow(バナナ・パイナップル・レモン)
*/</code></pre><h2 id="q4-文字列2013426を年月日のような配列に分割し、配列の最後に曜日時間を追加（年月日曜日時間）">Q4. 文字列’2013/4/26&#39;を[年,月,日]のような配列に分割し、配列の最後に[曜日,時間]を追加（[年,月,日,曜日,時間]）</h2>
<pre><code>var date = &#39;2013/4/26&#39;;

// \[結果\] [2014, 4, 26, &#39;金&#39;, &#39;10:10&#39;]</code></pre><h2 id="q5-0〜100の奇数・偶数をそれぞれ連想配列に分けて表示">Q5 0〜100の奇数・偶数をそれぞれ連想配列に分けて表示</h2>
<p>for文を使ってnumオブジェクトに奇数、偶数をいれてください</p>
<pre><code>var num = {};

/*
[結果]
{
  odd: [1, 3, 5, 7, ...],
  even: [0, 2, 6, 8, ...]
}
*/</code></pre>]]></content>
        <published>2018-08-23T05:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS問題] 文字列を使った問題]]></title>
        <id>H1lBoBxdjJW7uhAagLGer</id>
        <link href="https://clover.blue/doc/H1lBoBxdjJW7uhAagLGer">
        </link>
        <updated>2018-08-23T06:23:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="q1-自分の名前の文字数を下記のような形式で表示">Q1. 自分の名前の文字数を下記のような形式で表示</h2>
<pre><code>var name = &#39;自分の名前&#39;;

// [結果] 自分の名前はx文字です。</code></pre><h2 id="q2-自分の名前の1文字ごとに全角スペースをあけた文字を表示">Q2. 自分の名前の1文字ごとに全角スペースをあけた文字を表示</h2>
<p>for文を使ってそれぞれの文字の間に全角スペースをあけてください。</p>
<pre><code>var name = &#39;自分の名前&#39;;

// [結果] 自　分　の　名　前</code></pre><h2 id="q3-文字列100pxからpxを覗いた値を表示">Q3. 文字列’100px’から’px’を覗いた値を表示</h2>
<h2 id="q4-文字列100px-と-文字列-50pxを変数に入れてそれぞれを足した合計の値を表示">Q4. 文字列’100px’ と 文字列 &#39;50px&#39;を変数に入れてそれぞれを足した合計の値を表示</h2>
<pre><code>var num1 = &#39;100px&#39;;
var num2 = &#39;50px&#39;;

//変数num1とnum2を数値に変換してたしてください

// [結果] 150</code></pre><h2 id="q5-数値が入った変数を、金額表記の文字列に変換してください">Q5. 数値が入った変数を、金額表記の文字列に変換してください</h2>
<pre><code>var num1 = 1000000;

// 後ろから3桁区切りにしてください

// [結果] 1,000,000</code></pre>]]></content>
        <published>2018-08-23T05:36:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[JS問題] if文とfor文を使った問題]]></title>
        <id>WouTPbeF8wtazDx0WYq30</id>
        <link href="https://clover.blue/doc/WouTPbeF8wtazDx0WYq30">
        </link>
        <updated>2018-08-23T05:35:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="q1-1から100までの偶数だけ表示する">Q1. 1から100までの偶数だけ表示する</h2>
<p>for文を使ってください</p>
<h2 id="q2-100までの数字のうち、10〜30-70〜90の場合のみ表示する">Q2. 100までの数字のうち、10〜30, 70〜90の場合のみ表示する</h2>
<p>for文とif文を使ってください</p>
<h2 id="q3-1から100までの3の倍数だけ表示する">Q3. 1から100までの3の倍数だけ表示する</h2>
<p>for文を使ってください</p>
<h2 id="q4-1900年から2100年までの閏年の年をすべて表示する">Q4. 1900年から2100年までの閏年の年をすべて表示する</h2>
<p>for文を使ってください </p>
<h3 id="閏年とは">閏年とは</h3>
<p>4で割れる100で割れない。または、400で割れる</p>
]]></content>
        <published>2018-08-23T04:47:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[ブログを書くこと]]></title>
        <id>RC6rl0B9DTYGH0whg7TCZ</id>
        <link href="https://clover.blue/doc/RC6rl0B9DTYGH0whg7TCZ">
        </link>
        <updated>2018-08-07T02:34:25.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://scontent-nrt1-1.cdninstagram.com/vp/5aeb3f7c1cc57dc309e29e3dbbb8bff6/5C1341BC/t51.2885-15/e15/37642934_266269404156929_5551537201956782080_n.jpg" alt=""></p>
<p>最近ブログを書いていなかったのでここからまた色々とはじめたいなと思います。
ブログも作り直したので心機一転です。</p>
<h2 id="ブログのこだわりポイント">ブログのこだわりポイント</h2>
<h3 id="ポイント1">ポイント1</h3>
<p>CMSを使わずにシンプルに。
QiitaとDropbox PaperのApiを使って記事を取得する。</p>
<h3 id="ポイント2">ポイント2</h3>
<p>記事をlocalstorageにいれておくので遷移がはやい。</p>
<p>前回アクセスしたときから更新がなかった記事は、前回取得しておいたのを使うようにしました。</p>
<h2 id="技術的な話">技術的な話</h2>
<h3 id="主な構成">主な構成</h3>
<p><a href="https://github.com/kamem/clover.blue">https://github.com/kamem/clover.blue</a></p>
<ul>
<li>サーバー<ul>
<li>heroku</li>
</ul>
</li>
<li>サーバーサイド<ul>
<li>node</li>
<li>express</li>
<li>mongodb</li>
</ul>
</li>
<li>フロントエンド<ul>
<li>webpack</li>
<li>React</li>
<li>Postcss</li>
</ul>
</li>
<li>使ってるサービス<ul>
<li>Qiita</li>
<li>Drophox paper</li>
</ul>
</li>
</ul>
<p>VPNにしようかなって思ってたけどHerokuを使うことにしました。
AWSとかGCSとかも考えたのですが。お金の面とかも考えて。</p>
<p>技術的なことは別の記事でしっかり書きたいと思います。</p>
<p>これからなるべく、技術的な話とか、日常的な話とか書いていこうと思います。</p>
]]></content>
        <published>2018-07-31T00:31:08.000Z</published>
    </entry>
</feed>